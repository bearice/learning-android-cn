%
%
%
= Quick Start =[ch03]

{ORGI}In this chapter, you will learn how to set up your environment for Android development. I’ll go beyond just telling you where to download the software from, but will also into some of the best practices in getting set up. [I’ll go beyond just listing where you can download the software, and will cover some of the best practices in getting set up.] I’ll look at development operating system choices as well as Android tools available. You will see the good, the bad, and the ugly of various choices of tools and platforms that you’re about to make (or someone else has already made for you).

{TRAN}本章介绍Android 开发环境的搭建方法。这里列出了所需的各种软件的下载地址，也提供了构建开发环境的最佳实践。毕竟操作系统各有不同，开发工具也多种多样。面对诸多选择，对其长短优劣心里有数总是好的。

{ORGI}By the end of this chapter, you will have your entire development environment setup. You’ll be able to write a Hello World application, build it, and run it on the emulator (or physical device, if you want).

{TRAN}在本章的最后，你将拥有一个完整的开发环境。随后就可以动手编写/构建第一个 Hello World 程序，并在仿真器中（或者在真机上，只要你乐意）运行了。

{NOTE}
{ORGI}I’m going to be using ~ to refer to your home directory. On Mac OS X, that’s typically something like /Users/marko. On Linux, it would be /home/marko and on Windows Vista and 7, C:\Users\marko (in Windows XP, it would be C:\Documents and Settings\marko). Also, I’m going to be using Unix-style forward slashes and not Windows back slashes to denote file path separators.

{TRAN}下文将会使用 ``~`` 符号表示你的个人目录。对于 Mac OS X ，``~``一般代表 ``/Users/marko/`` 这样的目录，对 Linux ，``~``是 ``/home/marko`` ，在 Windows Vista 和 Windows 7 中是``C:\Users\marko``，而在Windows XP中是`` C:\Documents and Settings\marko``。同样，我将选择 Unix 风格的正斜线(/)而非 Windows 风格的反斜线(\)作为路径分隔符。

{ORGI}So, if you’re on Windows, just change ~ to C:\Users\YourUserName and / to \. Other than that, everything should be pretty much the same no matter whether you are on Mac, Linux, or Windows.

{TRAN}因此如果你使用 Windows 的话，只需要把 ``~`` 替换成 ``C:\Users\YourUserName`` ，并把 ``/`` 换成 ``\`` 。除此以外，在 Mac 、 Linux 或者 Windows 上都是相同的。
{/NOTE}

% == Installing the Android SDK ==
== 安装Android SDK ==

{ORGI}Android Software Development Kit (SDK) is all you need to develop applications for Android. It [The SDK] comes with a set of tools as well as a platform to run it and see it all work. You can download Android SDK for your particular platform from [Android SDK Download http://developer.android.com/sdk/index.html]page.

{TRAN}Android软件开发包（SDK）是你开发Android应用所需的一切。除了一套开发的工具集，它也提供了一个用以测试的平台。你可以在[Android SDK的下载页面 http://developer.android.com/sdk/index.html]为你的目标平台下载到对应的Android SDK。

{ORGI}Once you download it, unzip (or on Linux, untar) it into a folder that is easy to get to. Further examples in the book will assume your SDK is in the folder ~/android-sdk. If it’s in a different location, use that location instead of ~/android-sdk. For example:

{TRAN}下载之后，解压到一个方便访问的目录。在本书随后的例子中，将假定你的SDK安装目录在~/andorid-sdk。若你的安装目录在其它位置，留意替换即可。比如：

: Windows
  C:\apps\android-sdk-windows
: Linux
  /home/**YourUserName**/android-sdk-linux_86
: Mac OS X
  /Users/**YourUserName**/android-sdk-mac_86


{TIP}
% For Windows users, I strongly recommend choosing directories without spaces in them. This is because we’ll be doing work on the command-line [command line] and spaces just complicate things. Because the Windows XP home directory is in C:\Documents and Settings, I would recommend putting android-sdk in a top-level directory that you create, such as C:\apps.

我强烈建议Windows用户避免选择带空格的目录名，因为我们会经常用到命令行，夹带空格的目录名只会增加无谓的复杂性。而Windows XP的个人目录又恰恰带着空格:``C:\Document and Settings``，因此我建议把android-sdk放在一个新建的顶级目录之下，比如C:\apps。

% However, on Windows Vista or 7, you can simply extract android-sdk into C:\Users\YourUserName.

不过，Windows Vista或Windows 7的话，直接放在C:\Users\**YourUserName**下面就好。
{/TIP}


% === Setting up PATH to Tools ===
=== 设置PATH环境变量 ===

% Android SDK has a folder with all the major tools in it [that contains all its major tools]. Since we’re going to be using these tools from the command line, it is very helpful to add your ~/android-sdk/tools/ directory to your system PATH variable. This will allow you easier access to [This will make it easier to access] your tools without having to navigate to their specific location every single time.

Android SDK里有个目录，主要的工具都在里面。我们将会频繁地用到这些工具，因此把你的~/android-sdk/tools/目录加入系统的环境变量PATH会是个好办法，这一来就不需要每次使用它们时都切换目录了。

% Details for setting up PATH variable depend on the platform, and are documented at [Installing Android SDK http://developer.android.com/sdk/installing.html] page, Step 2 [; see step 2 of the document “Installing Android SDK”.].

不同系统设置环境变量的方式各有不同，详见 [Installing Android SDK http://developer.android.com/sdk/installing.html] 页面中的第二步。

(译注：Installing Android SDK: http://developer.android.com/sdk/installing.html)

%=== Installing Eclipse ===
=== 安装 Eclipse ===

% Eclipse is an open-source [open source] collection of programming tools originally created by IBM for Java. Nowadays, most developers in the Java community favor Eclipse as their Integrated Development Environment (IDE) of choice. Eclipse lives at Eclipse.org.

Eclipse是一个开源的编程工具集，前身是IBM为Java开发的IDE，如今已成为Java社区大部分开发者的首选。Eclipse的首页在[http://eclipse.org/ Eclipse.org]。

% Eclipse is very feature-rich and has a lot of time-saving features. I’ll be pointing them out as we keep on going. [Eclipse has a lot of time-saving features, which I’ll be pointing out as we continue.] Keep in mind that, while powerful [although powerful], Eclipse tends to be very resource-hungry [,] and you may want to restart it once a day if it starts running very sluggishly.

Eclipse有着强大的功能与丰富的实用特性，我会在行进的途中将其一一带出。不过需要留心的一点是，Eclipse强大归强大，但同时也非常吃资源，有时你会巴不得一天重启一次。

% While [Although] you can do Android development with any favorite text editor or IDE [integrated development environment (IDE)], most developers seem to be using Eclipse, and thus I’m basing this book on its use as well [and thus that’s what I use in this book].

Android开发并不限制开发者选择任何自己喜欢的编辑器或者IDE。不过Eclipse的使用者既占多数，本书也就选择了它。

{TIP}
% If you choose not to use Eclipse, please refer to [Developing in Other IDEs http://developer.android.com/guide/developing/other-ide.html]

如果你不想用Eclipse，可以参考 [Developing in Other IDEs http://developer.android.com/guide/developing/other-ide.html]。
{/TIP}

% Now, download Eclipse from [at] http://www.eclipse.org/downloads/. I recommend Eclipse IDE for Java Developers (NOT the twice-as-large Eclipse for Java EE developers). You can install it in any directory you’d like.

好，去 http://www.eclipse.org/downloads/ 可以下载到Eclipse。建议选择Eclipse IDE for Java Developers（注意不是Eclipse for Java EE developers，这个要大两倍），安装至任何目录都可以。

% === Eclipse Workspace ===
=== Eclipse Workspace ===

% Eclipse organizes all your work by projects. Projects are placed in a workspace, which is a location you choose. So, where you put your workspace is significant. I recommend ~/workspace as a simple place for your code. On Windows however, I recommend storying your workspace in a directory that doesn’t have spaces [in]it (they complicate anything you might do at the command-line). C:\workspace is a good choice for Windows users.

Eclipse以项目为单位管理用户的工作，项目又都位于workspace中。因此workspace的位置需要明确下来，我建议使用 ``~/workspace`` 这样相对简单的位置来存放自己的代码。Windows的话，仍建议避免在workspace目录中存在空格（使用命令行的时候会添麻烦）——``C:\workspace``该是个好地方。

% === Setting Up Android Development Tools ===
=== 安装Android Development Tools ===

% You also need to set up Android Tools for Eclipse. The instructions are:

你还需要安装Android Tools for Eclipse，如下：

% 	Figure 3.1. Install New Software
	图 3.1. 安装新软件
		[images/03-InstallAvailableSoftware.png]


% + Start Eclipse, then select Help → Install New Software.
% + In the Available Software dialog, click Add.
% + In the Add Site dialog that appears, enter a name for the remote site (for example, "Android Plugin") in the "Name" field.
% + In the "Location" field, enter this URL: https://dl-ssl.google.com/android/eclipse/
% + Click OK.
% + Back in the Available Software view, you should now see "Developer Tools" added to the list. Select the checkbox next to Developer Tools, which will automatically select the nested tools Android DDMS and Android Development Tools. Click Next.
% + In the resulting Install Details dialog, the Android DDMS and Android Development Tools features are listed. Click Next to read and accept the license agreement and install any dependencies, then click Finish.
% + Restart Eclipse.

+ 打开Eclipse，选择 ``Help`` → ``Install New Software``。
+ 进入``Available Software``对话框，单击Add。
+ 进入``Add Site``对话框，在``"Name"``栏输入一个远程站点的名字（比如，"Android Plugin"）。
+ 在``"Location"``栏，输入这个URL：https://dl-ssl.google.com/android/eclipse/。
+ 单击``OK``。
+ 回到``Available Software``对话框，这时你可以在这个列表中发现多了一个``"Developer Tools"``。选择它也就自动嵌套选择了Android DDMS和Android Development Tools，单击``Next``。
+ 在出现的``Install Details``对话框中，前面选择的Android DDMS和Android Development Tools都列了出来。单击``Next``，阅读并确认许可条款，安装依赖的插件，单击``Finish``。
+ 重启Eclipse。

{NOTE}
% If you have trouble downloading the plugin, you can try using "http" in the URL, instead of "https" (https is preferred for security reasons).

如果下载插件时遇到问题，可以尝试将URL中的``"https"``替换为``"http"``（使用``https``往往是出于安全目的）。
{/NOTE}


% == Hello, World ==
== Hello, World ==

% To make sure everything is set up properly, we’re going to write a simple Hello World program. As a matter of fact, there’s not much for us to write, but a lot to understand. This is because Eclipse will create the project shell for us from some predefined templates.

一切准备就绪，开工写一个Hello World程序。由于Eclipse会为项目自动生成一些模板，这里需要写的代码并不多，重要的是理解。

% === Creating New Project ===
=== 创建新项目 ===

% In Eclipse, choose File→New→Android Project. Sometimes (especially the first time you run Eclipse) the Android tools may not be appear there right away. They should show up in the future after you’ve used them for the first time. If Android Project is not an option under File→New, choose Other and look for Android Project in there.

进入Eclipse，选择 File→New→Android Project 。有时菜单里可能没有Android Project这一条目（尤其是在第一次启动Eclipse的时候），这时可以选择``Other``找到Android Project。只要选择过一次，它就会一直显示在菜单里。

% In the new project dialog window, fill out the following:

进入New Project对话框，分别进行如下设置：

% + "Project name" is an Eclipse construct. Eclipse organizes everything into projects. A project name should be one word. I like to use [CamelCase http://en.wikipedia.org/wiki/Camel_case_(programming)] naming convention here. Go ahead and type: HelloWorld.
% + Next, you need to choose the build target. The build target tells the build tools which version of Android platform you are building for. You should see a list of available platforms and add-ons you have installed as part of your SDK in here. Go ahead, pick one of the newer ones, such as Android 2.2 (but don’t choose the targets named Google APIs). [增加 (but don’t choose the targets named Google APIs—those are Google’s proprietary extensions to the Android platform). For our purposes, we’ll stick to Android Open Source versions of the Android platform.]
% + You need to fill out your project properties next. The application name is the plain English name of your application. Go ahead, write something like Hello, World!!!.
% + The package name is a Java construct. In Java, all source code is organized into packages. Packages are important because, among other things, they specify the visibility of objects between the various Java classes in your project. In Android, packages are also important for application signing purposes. Your package name should be the reverse of your domain name with optional subdomains. I might use com.example.calculator if I were building a calculator app and my domain name was example.com. I’m going to be using com.marakana for my package name here.
% + You can optionally specify an activity. I haven’t covered activities yet (you’ll learn about them in [Chapter 6, Android User Interface #ch6]), but think of them as corresponding to the various screens in your application. An activity is going to be represented by a Java class, so as such its name should adhere to Java class naming conversion: start with upper case and use CamelCase to separate words. So, type HelloWorld for your activity name.
% + The minimum SDK version is the minimum version of Android—as represented by API level—that is required on the device in order to run this application. You want this number to be as low as possible so that your app can run on as many various devices out there as possible. I’m going to put 8 here to represent Android 2.2, which I know I have installed.
% + Finally, click on Finish button and Eclipse will create your project. Let’s look at the various files that this process created:[Let’s look at the various files that this process created in Figure 3.2, “HelloWorld new project window”.]

+ 填写"Project name"。这是个Eclipse概念：Eclipse把一切皆组织为项目(project)，而项目名只能是一个单词。在命名上，我个人比较喜欢[CamelCase http://en.wikipedia.org/wiki/Camel_case]风格。在此输入：``HelloWorld``。
+ 选择"build target"，它为构建工具指明目标平台的版本。其中罗列了所有可用的目标平台，以及你的SDK中附带的扩展。在这里可以选择一个较新的版本，比如Android 2.2（但不要选择Google APIs，它们是Google针对Android平台的专有扩展）。
+ 接下来设置project属性。其中的application name也就是你应用的英文名字，随便写上就好，比如"Hello, World!!!"。
+ "package name"是个Java中的概念。在Java中，源码都是组织为一个个的package，用以表示Java对象在不同类中的可见性，是个很重要的概念。在Android开发中，package作为应用程序签名的基本单位，也是很重要的。它的命名规范为逆序的域名，后跟可选的子域名。比如我有个域名是example.com，要编写一个计算器（caculator）的应用，那么package的名字就可以是com.example.caculator。
+ "activity"一项是可选的。目前我们还没讲到Activity（参见[第六章，Android用户界面 #ch6]），姑且把它看作是程序的界面即可。Activity通过Java的类来表示，因此它的名字也同样遵循Java中类的命名规范：首字母大写，对多个单词使用CamelCase命名规范。在此输入``HelloWorld``作为Activity的名字。
+ "minimum SDK version"是这一应用所支持目标平台的最低版本，以API Level为单位。若想要得到较高的兼容性，就选择一个较低的版本。在这里我们不需要考虑兼容性，因此选择8，对应Android 2.2。
+ 最后单击Finish按钮，Eclipse就会新建出一个项目。接下来，我们依次观察一下在这一环节中新建出来的文件。

	**图 3.2. New Android Project窗口**
		[images/03-NewProject.png]


%=== Manifest File ===
===Manifest 文件===

% Manifest file glues everything together. It is this file that explains what the application consists of, what all its main building blocks are, what permissions it requires, and so on.

Manifest文件是应用程序各部分之间的牵线人。它申明了程序中包含的构件(Building Blocks)及其所需权限等信息。

**Example 3.1. AndroidManifest.xml**
{CODE}
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
  package="com.marakana" android:versionCode="1" android:versionName="1.0">
  <application android:icon="@drawable/icon" android:label="@string/app_name">
    <activity android:name=".HelloWorld" android:label="@string/app_name">
      <intent-filter>
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
      </intent-filter>
    </activity>

  </application>
  <uses-sdk android:minSdkVersion="8" />

</manifest>
{/CODE}

%=== Layout XML Code ===
=== Layout文件 ===

% The layout file specifies the layout of your screen. In this case, we have only one screen and its loaded by the Java code, HelloWorld activity above. [In this case, shown in Example 3.2, “res/layout/main.xml”, we have only one screen, and it’s loaded by the HelloWorld.java code seen in Example 3.5, “HelloWorld.java”.]

Layout文件用于表示界面的布局。在这里我们只用到了一个界面，就是上面定义的Activity：``HelloWorld``。

**Example 3.2. res/layout/main.xml**
{CODE}
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:orientation="vertical" android:layout_width="fill_parent"
        android:layout_height="fill_parent">
        <TextView android:layout_width="fill_parent"
                android:layout_height="wrap_content" android:text="@string/hello" />
</LinearLayout>
{/CODE}

% === Strings ===
=== Strings文件 ===

% This is another XML file that contains all text that your application uses. For example, names of buttons, labels, default text and all such strings go into this file. This is the best practice of separating concerns of various files, even if they are XML files. In other words, layout XML is responsible for layout out widgets, but strings XML is responsible for their textual content [增加 (see Example 3.3, “res/values/strings.xml”).].

这也是个XML文件，内容是程序中出现的所有文本。比如按钮的名字、Label、默认的文本等等，都统一在这一文件之下。把问题分解，令不同文件各司其职，这是个很好的做法——哪怕是XML文件。由此，Layout文件负责Widget的布局，Strings文件负责文本内容。

**Example 3.3. res/values/strings.xml**
{CODE}
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="hello">Hello World, HelloWorld!</string>
    <string name="app_name">Hello, World!!!</string>
</resources>
{/CODE}

% === The R File ===
=== R文件 ===

% The R file is the glue between the world of Java and the world of resources [增加 (see Example 3.4, “gen/com/marakana/R.java”)]. It is an automatically generated file and as such you never modify it. It is recreated every time you change anything in the res directory, for example add an image or XML file.

R文件负责Java与外部资源之间的关联。它在res目录中的内容发生变化时(比如添加一个图片或者xml文件)由SDK自动生成，不必也不应该手工修改。

%TALK: 大意是指在编译时，SDK若发现res目录中的内容有变化，就重新生成一遍R文件。对make有了解的同学可能好明白一些，这句确实别扭，不过没想到好的译法。

% You don’t need to look at this file much. We will use data it in quite a bit, but we’ll use Eclipse to help us refer to values stored in this file.

既然有Eclipse代劳，对这个文件本身我们不必关注太多。不过它里面的数据是非常有用的。

**Example 3.4. gen/com/marakana/R.java**
{CODE}
/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

package com.marakana;

public final class R {
    public static final class attr {
    }
    public static final class drawable {
        public static final int icon=0x7f020000;
    }
    public static final class layout {
        public static final int main=0x7f030000;
    }
    public static final class string {
        public static final int app_name=0x7f040001;
        public static final int hello=0x7f040000;
    }
}
{/CODE}

% === Java Source Code ===
=== Java源码文件 ===

% The Java code is what drives everything. It is this code that ultimately gets converted to Dalvik executable and runs your application [增加 (see Example 3.5, “HelloWorld.java”).].

Java代码是整个程序的驱动者。它会被编译为可执行格式，在Dalvik之上执行。

**Example 3.5. HelloWorld.java**
{CODE}
package com.marakana;

import android.app.Activity;
import android.os.Bundle;

public class HelloWorld extends Activity {
  /** Called when the activity is first created. */
  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);
  }
}
{/CODE}

%== The Emulator ==
== 仿真器 ==

% Running your application on a physical device versus an emulated device is pretty much the same thing. That is because the emulator is an actual code emulator, meaning it runs the same code base as the actual device, all the way down to the machine layer.

在仿真器（Emulator）上执行程序，与在真机上执行的效果是一样的。这是因为仿真器是机器码级别的仿真，其机器码与真机相同。

{TIP}
% A simulator and an emulator sound very similar, but are fundamentally different. To emulate means to imitate the machine executing the binary code. So, an emulator is sort of like a virtual machine. A simulator merely simulates the behavior of the code at a higher level. Android SDK ships with a true emulator, based on [QEMU http://wiki.qemu.org/Main_Page].

模拟器(Simulator)与仿真器(Emulator)名字很像，但有着本质的不同。“仿真器”的意思是模仿真机执行机器码的过程，接近于“虚拟机”。而“模拟器”是在相对较高的层次上模拟代码的行为。Android SDK附带了一个基于[QEMU http://wiki.qemu.org/Main_Page]的仿真器。
{/TIP}

% To use the emulator, we’ll have to create an Android Virtual Device (AVD). The easiest way to do that is to start the android tool via Eclipse.

使用仿真器之前，我们需要创建一个Android Virtual Device(AVD)。最简单的方法是在Eclipse中打开Android Tool。

% To create a new AVD, start the tool called Android SDK and AVD Manager. You can start this tool from Eclipse by clicking on icon [images/03-icon_android.png] or via command line by starting tool called android in your SDK/tools directory.

打开Android SDK and AVD Manager：可以在Eclipse中单击[images/03-icon_android.png]，也可以在SDK的tools目录中执行``android``命令。

	**图 3.3. Android SDK与AVD Manager**
		[images/03-AndroidSDKandADVManager.png]

% From within Android SDK and AVD Manager, you can choose New… and a Create New AVD dialog window will pop up. In this dialog, you specify the parameters for your new AVD. The name is any name you choose. Target is what you what to have installed as version of Android on this particular AVD. The list of possible targets is based on platforms and add-ons that you have installed into your SDK. If you don’t have any targets, go back to Android SDK and AVD Manager and choose Available packages tab to install at least one platform, such as Android 2.3 - API level 9, for example [for example, Android 2.3 - API level 9].

进入Android SDK and AVD Manager，单击New…，出现Create New AVD对话框。你需要在这个对话框里对新的AVD做一些设置， 其中Name可以随便起一个，Target是目标平台的版本，其中的选项会因为SDK的平台及其安装的扩展而有所不同。如果里面没有列出任何选项，那就返回Android SDK and AVD Manager，在Available packages中选择安装一个目标平台，比如Android 2.3 - API level 9。

% Each AVD can have an SD Card. You can just specify a number here for your built-in card, in megabytes. Skin is the look and feel of your device as well as its form factor. Hardware option lets you fine tune what this AVD does or doesn’t support.

AVD中也有一个SD卡，你能以MB为单位指明它的大小。Skin表示虚拟设备的观感。通过Hardware选项可以详细设置AVD的硬件参数，选择支持的特性。

	**图 3.4. 新建AVD的对话框**
		[images/03-CreateNewAVD.png]

% Once you are done with this dialog, you will have and AVD in your list. Go ahead and start it. An emulator will pop up [增加 (see Figure 3.5, “Emulator”).].

配置完毕，就可以在列表中见到一个新的AVD。好的，运行它仿真器就出来了。

	**图 3.5. 仿真器**
		[images/03-Emulator.png]

% === An Emulator Versus a Physical Phone ===
=== 仿真器 vs 真机 ===

% For the most part, running your application on the emulator is identical to running it on a physical phone. There are some notable exceptions, mostly to do with things that are just hard to virtualize, such as sensors. Other hardware-related features like telephony and location services, can be simulated in the emulator.

在大多数情况下，应用在仿真器上执行，与在真机上是没有区别的。少数的例外情况则往往是因为难以模拟，比如传感器。一般的硬件相关特性比如电话呼叫、地理定位等等，都可以由仿真器模拟。

% == Summary ==
== 总结 ==

% Setting up Android development environment breaks down to [basically involves ] setting up Android SDK and Eclipse. Once you have set you [set up] your development environment, a good test [way] that everything is working is to use Eclipse to create a simple Hello World project and run it in the Emulator. If that runs fine, you are almost certain that your system is setup and ready for further development.

Android开发环境的搭建，几乎就是对付Android SDK和Eclipse了。 开发环境设置完毕，不妨动手搞个简单的Hello World实验一下。运行良好的话，也就证明环境已经搭建完毕，为往后正式的开发做好了准备。

