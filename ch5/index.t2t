%
%
%
% vim: fdm=manual
{ORGI}= Yamba Project Overview =
{TRAN}= Yamba 项目简介 =[ch5]

{ORGI}The best way to learn is by an example. And that example has to meet certain criteria. After working with thousands of new Android developers and explaining some of unique concepts that this platform has to offer, using various example applications, I concluded that the best example has to be:
{TRAN}学习的最好方法就是动手实践，因此一个好的实例是很重要的。在平日面向数千初学者的教学中，我曾尝试使用过许多不同的实例。经过总结，一个好的实例该有如下特征：

{ORGI}**Comprehensive**
{TRAN}**全面**
{ORGI}A good example app should demonstrate most of the aspects of the application framework that are unique to Android. It should also cover them in a way that there’s a good reason to use a specific feature in order to get the job done. This is important in order to create the right motivation for those new to Android.

{TRAN}一个好的实例应该足以涵盖Android应用框架中的诸多特性，同时也把相应的特性用在点子上，而不仅仅是为了展示特性而使用特性。这对新接触Android的同学来说，可以端正学习的方向，是很重要的。

{ORGI}**Familiar**
{TRAN}**大众化**

{ORGI} The example application should be simple to understand. We want to focus on design and implementation and not on features and benefits.
{TRAN}一个好的实例应当是简单易懂的。对我们来说，学习的重点在于理解它的设计与实现，而非死记硬背它的特性与好处。

{ORGI}== The Yamba Application ==
{TRAN}== Yamba 项目 ==

{ORGI}The application I picked for this book is a Twitter-like application. We call it Yamba which stands for //Yet Another Micro Blogging App//. Yamba lets a user connect to a service such as Twitter, pull down friends' statuses, and update user’s own status.
{TRAN}我为这本书选择了一个类Twitter的应用程序作为实例，它的名字是Yamba，即 //Yet Another Micro Blogging App//。 使用Yamba，你可以连接到twitter之类的微博服务以跟踪朋友的消息，也可以更新自己的消息。

{ORGI}Yamba covers most of the main Android building blocks in a natural way. As such, it’s a great sample application to illustrate how various components work individually as well as fit together. Services such as Twitter are more or less familiar to most people, so the features of the application do not require much explaining.
{TRAN}Yamba作为一个实例，它应用了Android的所有构件(Building Blocks)，全面而不失简洁。我们可以留意下它是如何将各个独立工作的部分合而为一的。至于Twitter这样的微博服务大家肯定不会陌生，因此有关程序的功能也就不多做解释了。

% [增加 Figures 5.1 through 5.3 show what a finished product could look like.]

{ORGI}Here’s what a finished product could look like:
{TRAN}成品图大约如下：

{ORGI}**Figure 5.1. List of status messages from other people, called a timeline**
{TRAN}**图5.1. 来自友邻的消息列表，也就是Timeline**

		[images/05-TimelineActivity-final.png]


{ORGI}**Figure 5.2. Screen where the user can enter a status message**
{TRAN}**图5.2. 用户输入消息时屏幕的样子**
		[images/05-StatusActivity-final.png]


{ORGI}**Figure 5.3. User preferences**
{TRAN}**Figure 5.3. 用户选项**
		[images/05-PrefsActivity-final.png]

% [增加 Figure 5.1, “List of status messages from other people, called a timeline” shows how Yamba displays a list of status messages from your friends. Figure 5.2, “Screen where the user can enter a status message” shows the initial Yamba screen, and Figure 5.3, “User preferences” shows the user preferences.]

{ORGI}== Design Philosophy ==
{TRAN}== 设计原则 ==

{ORGI}We’re going to adopt a certain design philosophy in tackling this project. This philosophy will help guide us in our development and serve as a north star when in doubt about what to do next. It should also help eliminate some confusion in the process we’re following.
{TRAN}我们需要引入一个设计原则，作为指导项目行进的指南针，并贯彻于项目的始终。在遇到问题时，它也可以给予我们一定的帮助。

{ORGI}**Small Increments**
{TRAN}**渐进式开发**

{ORGI}	Yamba application will start out small and will constantly grow in functionality and complexity. Initially, the app will not do much, but it will organically grow one step at a time. Along the way, we’ll explain each step so that you’re expanding your skills along the way.
{TRAN}先从一个小程序做起，随后慢慢给它添加功能。一开始程序的结构会很简单，但是我们会在更新中不断为它添血加肉，让它慢慢成长。行进途中我会及时讲解这些变化，读者可以留意。

{ORGI}**Always Whole and Complete**
{TRAN}**保持完整，保持可用**

{ORGI}	The application must always be working. In other words, we’ll add new features in small, self-contained chunks and pull them back into the main project so that you can see how it fits together as a whole. The application must always work at each stopping point.
{TRAN}程序必须保证一直都是可用的。或者说，在每次修改中所添加的功能应尽量的小并且完备。一旦将其加入原先的代码库，就依然是一个整体，并保证在每一轮更新之后，程序都是可以正常运行的。

{ORGI}**Refactoring Code**
{TRAN}**代码重构**

{ORGI}	Once in a while, we’ll have to take a step back and refactor the application to remove duplicate code and optimize the design. The goal is to reuse the code and not reinvent the wheel. But we are going to cross those bridges as we get to them, providing the motivation for refactoring along the way. This process will teach you about some general software development best practices as well.
{TRAN}每过一段时间就回头重构下我们的程序，及时消除重复代码，优化设计，增加代码重用，避免重复造轮子。 但也没有必要纠结于一次性解决所有的问题，毕竟还有未来的重构。在这一流程中，读者也可以体会下软件开发过程中的最佳实践。

{ORGI}== Project Design ==
{TRAN}== 项目设计 ==

{ORGI}If you remember from __Chapter 4, Main Building Blocks__, an Android application is a loose collection of Activities, Services, Content Providers, and Broadcast Receivers. These are the components from which we put together an application. __Figure 5.4, “Yamba Design Diagram”__ shows the design of the entire Yamba application, which incorporates most of the main Android building blocks.
{TRAN}在[第4章 #ch4]中有提及，Android应用就是Activity、Service、Content Provider、Broadcast Receiver的松散组合。它们作为Android的基本构件(Building Block)，在开发中扮演着不可或缺的角色。 //图5.4// 给出了Yamba的设计架构，不妨留意其中基本构件与应用之间的关系。

	**图 5.4. Yamba设计图**
		[images/05-Yamba.png]


{ORGI}== Part 1: Android User Interface ==
{TRAN}== 第一部分: Android 用户界面 ==

{ORGI}This part will focus on developing the first part of Yamba application: the Status Update screen. Our tasks are: [全段修改为 This part, covered in Chapter 6, Android User Interface, will focus on developing the first component of the Yamba application: the Status Update screen. Our tasks are building an activity, networking and multithreading, and debugging.]
{TRAN}在这部分中，我们将着重介绍 Yamba 的第一个部分：消息更新界面。 我们的主要任务有：

{ORGI}=== Building an activity ===
{TRAN}=== 构建一个 Activity ===
% 这里的Activity是Android中的一个类，因此不翻译为界面，下同。

{ORGI}We are going to start by introducing the Android user interface (UI) model. In its UI, Android is quite different from some other paradigms that you may be familiar with. The unique feature is its dual approach to UI via both Java and XML.
{TRAN}我们先来熟悉一下 Android 的用户界面(UI)模型。Android的UI模型可能与你接触过的其它UI模型有所不同，其最大特点即它的 UI既可以通过Java描述，也可以通过XML描述。

{ORGI}In this chapter, you will learn how to develop the user interface for __Figure 5.2, “Screen where the user can enter a status message”__, where the user updates the status. Through this process, you will use XML and Java to put together a working UI. You will learn about Layouts and Views, units in Android, how to work with images, and how to make the UI look pretty.
{TRAN}在这一章中，我们将尝试开发一个如//图5.2//那样允许用户发布消息的界面。在此过程中，我们配合使用Java与XML完成UI 的设计。在此，读者将了解到Android中Layout与View的概念，以及图片的使用方法与美化UI的窍门。

{ORGI}Our approach will focus on best practices in UI development so that your application looks good and works well on any Android device, regardless of screen size and resolution.
{TRAN}在此，我们将贯彻 UI 设计的最佳实践，使你的应用程序能够适应任何尺寸和分辨率，而不失美观和实用。

{ORGI}=== Networking and multithreading ===
{TRAN}=== 网络和多线程 ===

{ORGI}Once we have a working screen, we are going to want to post the user input to the cloud service. For that purpose, we are going to use a third-party library to help us with the Twitter API web service calls.
{TRAN}有了用户界面，接下来就应该考虑用户与服务端交互的实现方法了。在此，我们引入一个三方库来帮助我们访问 Twitter 的 API 服务。

{ORGI}While making the network calls, you’ll notice that the UI starts behaving sluggishly, due to the unpredictable nature of the network. The network latency may even cause our application to stop responding. At that point, we are going to introduce multithreading in Android and explain how to develop an app to work well regardless of external circumstances.
{TRAN}在网络调用执行中，我们会发现界面响应不灵，这是因为网络操作是不可预知的。毕竟不能让网络操作把我们的界面卡死，因此我们在这里引入Android中的多线程机制，避免不必要的外部阻塞。

{ORGI}=== Debugging Android Apps ===
{TRAN}=== Android 程序的调试 ===

{ORGI}A few things are going to go wrong in this section. This is by design. Debugging is a normal part of application development. We’ll show you how to use the Android SDK tools to quickly find and fix problems. Debugging will become second nature to you.
{TRAN}哦，糟糕，我们的程序不能正常工作了。不过别担心，这是必须的。调试是正式开发中不可回避的一部分。我们将在本章讲解 Android SDK中提供的调试工具的使用方法，学会如何快速地定位问题并解决问题。调试会成为你的第二本能的！

{ORGI}== Part 2: Preferences, File System, Options Menu, and Intents ==
{TRAN}== 第二部分: 首选项，文件系统，选项菜单以及Intent ==
% 关于 Intents 这个词是否需要翻译还需要讨论，我的建议是不翻译 理由同样是它属于一个类名。
% 不译 +1

{ORGI}This part is all about the preferences screen. At the end of this section, your Yamba application will have two screens, one for status updates and the other for setting up the preferences. At this point, Yamba is configurable for various users and starts being a useful app. The elements we’ll create at this stage are: [全段修改为 This part, covered in Chapter 7, Preferences, the Filesystem, the Options Menu, and Intents, is all about the preferences screen. At the end of this part, your Yamba application will have two screens, one for status updates and the other for setting up the preferences. At this point, Yamba is configurable for various users and starts being a useful app. The elements we’ll create at this stage are the activity, the menu system and intents, and the filesystem.]
{TRAN}这部分讨论用户个人选项界面的实现。 在本节结束后，Yamba 将会拥有两个用户界面，一个用来更新消息，另一个用于配置个人选项。 此时的Yamba已经可以为用户所配置，成为一个可用的 App 了。本阶段我们要新建的东西有：

{ORGI}=== The Activity ===
{TRAN}=== 选项界面 ===

{ORGI}First, we’ll create the screen, which is an activity, a basic Android building block. You will see the steps involved and understand what it takes to create new screens.
{TRAN}首先我们需要一个界面。每个界面都对应着一个Activity，它是 Android 的基本构件之一。 我们将在这里学习新建界面的步骤和方法。

{ORGI}=== Menu System and Intents ===
{TRAN}=== 菜单系统与 Intent ===

{ORGI}Next, we’ll need a way to get to that screen. For that purpose, we’ll introduce menu system in Android and how it works. You will also learn about Intents and how to send intents to open up a specific activity.
{TRAN}我们还需要一个地方来切换界面，因此在这里引入 Android 的菜单系统及 Intent 机制，学习通过发送 Intent 实现切换界面的方法。

{ORGI}=== File System ===
{TRAN}=== 文件系统 ===

{ORGI}Finally, we’ll learn about the file system on a typical Android device. You will get a deeper understanding how the operating system is put together. You will also learn more about Android security.
{TRAN}最后我们将学习典型 Android 设备上的文件系统。阅读本章之后，你将对操作系统的架构以及Android的安全机制有更深一层的理解。

{ORGI}== Part 3: Android Services ==
{TRAN}== 第三部分: Android Service ==

{ORGI}This part [增加 covered in Chapter 8, Services,] introduces background services. By the end of this section, your Yamba application will be able to periodically connect to the cloud and pull down your friends' status updates.
{TRAN}这部分对应第八章，介绍Service(后台服务)的相关知识。到本章结束，Yamba将能够定期访问服务端，即时更新朋友的消息。

{ORGI}=== Android Services [修改为 Services] ===
{TRAN}=== Service ===

{ORGI}Android services are very useful building blocks. They allow a process to run in the background without the need for any user interface. This will be perfect for Yamba, as we’ll have an update process periodically connect to the cloud and pull the data. In this section, you will also learn about multithreading considerations as they apply to background services.
{TRAN}Android 的 Service 是个很重要的构件。它允许进程在后台运行，而无需用户界面。 这对 Yamba 自然是再合适不过，我们可以凭借它实现定期与服务端交互。在本节，你将学到Service中多线程的使用方法。

{ORGI}=== Application object ===
{TRAN}=== Application对象 ===

{ORGI}At this point, we’ll notice repetition in the code and recognize that our system is no longer as elegant as it could be. So we are going to introduce the Application object as a way to refactor Yamba and make it easier to grow.
{TRAN}到这里，我们会发现代码中多了些重复的东西，而不那么优雅了。为了重构 Yamba 使之更易于扩展，我们在此引入 Application 对象。

{ORGI}== Part 4: Working with Databases ==
{TRAN}== 第四部分: 使用数据库 ==

{ORGI}We now have the data from our updater service, but no place to store it. In this part, [增加  covered in Chapter 9, The Database, ] we’ll introduce you to Android’s support for databases. By the and of this section, our data from the cloud will be persisted in the database.
{TRAN}现在我们已经可以从服务端获取数据了，但还没有地方用来存储数据。在此，我们介绍 Android 的数据库支持。在本节的最后，我们即可实现将数据持久化保存在数据库中。

{ORGI}=== SQLite and Android support for it ===
{TRAN}=== SQLite以及Android的数据库支持 ===

{ORGI}Android ships with a built-in database called SQLite. In addition to this cool little database, the Android framework offers a rich API that makes SQLite easier for us to take advantage of it. In this section, you will learn how to use SQLite and the API for it. No, you do not have to be an SQL buff to understand what is going on, but some basic understanding of SQL always helps.
{TRAN}Android自带了 SQLite 数据库的支持。SQLite短小精悍，更有Android框架中丰富的API，使用起来会很容易。本节我们介绍SQLite及其配套API的使用方法。哦，在这里还没必要精通SQL，不过了解一些SQL总是好的。

{ORGI}=== Refactoring the code, again ===
{TRAN}=== 再次重构代码 ===

{ORGI}At this point, we’ll have yet another opportunity to refactor our code and make it more streamlined. There will be a good motivation for it at that moment, and the effort will further be rewarded in later chapters.
{TRAN}到这里不妨再重构一下代码。不必吝惜重构的机会，它是长线投资，甜头只有在后面才尝的出来。

%TALK: 上段需要仔细斟酌

{ORGI}== Part 5: Lists and Adapters ==
{TRAN}== 第五部分: List与Adapter ==

{ORGI}It may sound like we’re back in UI-mode, but Lists and Adapters are more organizational aids that user interface elements in Android. They form a very powerful components that allows our tiny UI to connect to potentially very large datasets in an efficient and scalable manner. In other words, users will be able to use Yamba in the real world without any performance hits in the long run.
{TRAN}听名字像是回头复习UI了，但List与Adapter与众不同。作为控件，它们允许我们将大量的数据集与小屏幕上的显示绑定在一起，且不失高效性与伸缩性。从用户的角度来看，得到的好处就是Yamba不会因为运行时间的增长而变慢。

{ORGI}Currently the data is all there in the database, but we have no way to view it. In this part,[增加 covered in Chapter 10, Lists and Adapters, ] the Yamba application will get the much-needed Timeline Activity and a way for the user to see what his or her friends are chatting about online.
{TRAN}数据都已保存在了数据库中，但还没有办法显示出来。在此我们为 Yamba 设计一个显示Timeline的界面，方便用户查看朋友消息。

{ORGI}=== Timeline Activity ===
{TRAN}=== Timeline界面 ===

{ORGI}We’re going to develop this third and final activity in multiple stages. First, we’ll use existing knowledge of Android UI and put something together. It will work, sort of. Next, we’ll improve on that design. The app will look better, but it won’t be nearly as ready for the prime time since our design won’t be able to handle real-world usage. Finally, we’ll get it right by introducing Lists and Adapters to the mix. [Finally, we’ll get it right by introducing Lists and Adapters to the mix and use them to tie the data to our user interface.]
{TRAN}接下来分步实现第三个也是最后一个界面。首先利用已知的Android UI知识组装出一个半成品，能基本工作就好；然后改进设计，它会看起来更漂亮些，但是依然不能满足现实世界的需求；最后我们引入List与Adapter，使之完善可用。

{ORGI}=== More refactoring? ===
{TRAN}=== 再重构一次？ ===

{ORGI}We’ll have yet another opportunity to refactor our code by introducing a base activity for all our common activity needs. This will give user a more consistent feel for the app across multiple screens and will give us an easier way to manage the code going forward.
%{TRAN}，于是可以再次重构我们的代码了。为了用户在不同的界面中感受到一致的体验，并且让后续的编码变得更加轻松。
{TRAN}我们希望用户能够在不同的界面中感受到一致的体验，也希望我们自己管理代码能够更容易些——再重构一次吧。在此我们引入一个BaseActivity作为所有Activity的基类，将重用的代码提取出来。

{ORGI}== Part 6: Broadcast Receivers ==
{TRAN}== 第六部分: Broadcast Receiver ==

{ORGI}In this part,[增加 covered in Chapter 11, Broadcast Receivers] we’ll equip Yamba with receivers so it can react to events around it in an intelligent way. For that purpose, we’ll use Broadcast Receivers.
{TRAN}我们想让Yamba智能地响应外部事件。为此，在这里引入Broadcast Receiver机制。

{ORGI}=== Boot and Network Receivers ===
{TRAN}=== Boot Reciever与Network Reciever ===
%TALK: 这里的 Receivers 翻译成侦听器是否合适?
%TALK: 几个Building Blocks都尽量保留原文吧

{ORGI}For example, we want to start our updates when the device is powered up. We also want to stop pulling the data from the cloud when the network is not available, only to start it again once we’re back online. This goal will introduce us to one type of Broadcast Receivers.
{TRAN}假如我们希望在设备开机时就开始更新消息，也希望在网络离线时暂停更新，并在网络正常时恢复更新。要实现上述功能，我们需要引入Broadcast Receiver机制。

{ORGI}=== Timeline Receiver ===
{TRAN}=== Timeline Reciever ===

{ORGI}There’s another type of receiver. This one will only exist at certain times. Also, it won’t be receiving messages from the Android system, but from various other parts of our own Yamba application. This will demonstrate how we can use Receivers to put together loosely coupled components in an elegant and flexible way.
%NOTE: couple --> 耦合
{TRAN}还有另一种Receiver，它们只存在于特定的时间段，收听的消息也不是来自Android系统，而是来自Yamba自身的其它部分。我们将在这里了解到，如何使用Reciever将松散耦合的各部分优雅地组合起来，而不失可扩展性。

{ORGI}=== Permissions ===
{TRAN}=== 权限 ===

{ORGI}So far you knew how to ask for system permissions, such as access to the Internet or file system. In this section we’ll learn how to define our own permissions and how to enforce them. After all, Yamba components may not want to respond to anyone else for some Yamba-specific actions.
{TRAN}在访问网络或者文件系统时，你已经对系统内置的权限机制有所了解。在这里，我们将尝试定义我们自己的权限机制，并应用它们。毕竟我们不希望他人可以随便访问Yamba的内部操作。


{ORGI}== Part 7: Content Providers ==
{TRAN}== 第七部分: Content Provider ==

{ORGI}In this part,[增加 covered in Chapter 12, Content Providers] we’ll revisit content providers and refactor our database code to use them. To demonstrate that it all works, we’ll throw in an Android App Widget.
{TRAN}在这里，我们将再访Content Providers，重构数据库的代码来使用它们。为展示它们的工作方式，我们将引入一个Android小部件。

%NOTE： demonstrate that it all works，原意为“展示它们工作良好”，在此意译。既然"可以观察它的工作方式"了，必然是“工作良好”的。

{ORGI}=== Status Data ===
{TRAN}=== 消息数据 ===

{ORGI}Our status data is okay the way it is if nobody else cares about it. But what if we want to expose some of this data to the rest of the system? After all, other applications may leverage our friends' timeline in a new and creative way. To do that, we’ll create a Content Provider and expose our status data.
{TRAN}其它程序不能干涉我们的消息数据，这样很好。但我们想让其它程序访问这些数据又该怎么办？毕竟其它程序也可能会希望利用我们的数据，通过它们独特的表现手法做另一番展示。为此，我们需要创建一个Content Provider为外部提供数据。

{ORGI}=== Android Widgets ===
{TRAN}=== Android Widgets ===

{ORGI}But who will remember to pull up our app? To demonstrate usefulness of our new Status Data, we’ll put together an App Widget. App widgets are those little components that the user can put on the home screen to see weather updates and such. We’ll create a widget that will pull the latest status update from Yamba database via Status Data Content Provider and display it on the Home screen.
{TRAN}但是谁会关心我们的数据呢？当然有，比如小部件(App Widget)，也就是挂在主屏幕上显示天气之类的小东西。我们将在这里新建一个小部件，通过Content Provider读取最新消息并显示在主屏幕上。

{ORGI}== Part 8: System Services ==
{TRAN}== 第八部分: 系统服务 ==

(译者注："系统服务"与作为构件的"Android Service"是不同的东西。在翻译中，我们将所有构件的名字保留原文，而将System Service译为"系统服务"，以示区别。)

{ORGI}The Android OS comes with many useful system services: processes you can easily access to ask for things like your location, sensor readings, WiFi hotspots, and much more. In this part, [增加 covered in Chapter 13, System Services, ] you will add some cool new features to Yamba, such as user’s current location.
{TRAN}Android 操作系统内置了许多有用的系统服务供程序使用，比如当前位置、传感器数据、WiFi热点等等。在这部分，我们将为Yamba添加若干小功能，比如提交用户的当前位置。

{ORGI}=== Compass & Location ===
{TRAN}=== Compass与Location ===

{ORGI}This example will illustrate how system services work in general. You will walk away understanding some common patterns for using these services. We’ll illustrate building a compass app using sensors. Later, we’ll put this knowledge to use in order to let Yamba support the user’s location when posting status updates.
{TRAN}本例用以演示系统服务的工作方式。我们将利用传感器的有关特性，开发一个指南针应用，随后将类似的功能引入Yamba，为用户发送的消息附带上坐标信息。

{ORGI}=== Intent Service, Alarms, Notifications ===
{TRAN}=== Intent Service, Alarms, Notifications ===

{ORGI}It turns out that some of the cool features Android services provide can make our Updater service much simpler. So we’ll refactor our code, yet again. This time, we’ll introduce Intent Services that respond to Intents. But we’re going to need something to fire off these intents on regular basis, and for that we’ll use the Alarm service. Additionally, we’ll add a feature to notify the user of new updates by putting a notification in the notification bar. For that, we’ll use the Notification service. All this will prove to be a substantially more elegant solution to our Updater service need.
{TRAN}可以看到，Android内置了一些很酷的Service，用好可以简化UpdaterService的实现。所以再次重构代码吧。在这里我们引入IntentService来响应Intent请求，另外还需要有人来触发Intent请求，因此引入Alarm Service。我们还将使用到Notification Service，在系统托盘(Notification Area)显示提示信息。经过重构，我们将得到一个更为优雅的UpdaterService实现。

{ORGI}== Summary ==
{TRAN}== 总结 ==

{ORGI}This chapter is intended as a road map for the next eight chapters. By the end of all these iterations, you will have built a medium-size Android app from scratch. Even more, you will understand various constructs and how to put them together into a meaningful whole. The hope is that you’ll start developing a way of ``thinking`` in Android.
{TRAN}本章可作为后面八章的铺垫。经过一轮轮的迭代，你将完成一个中等规模的Android应用。更重要的是，你可以在这过程中体会到程序各部分的意义、及其合而为一的方法。或者说，这就是体会到Android开发中的“思维方式”。
