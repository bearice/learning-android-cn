%
%
%

% = Android Interface Definition Language =
= Android接口描述语言 =

% Each application in Android runs in its own process. An application cannot directly access the data of another application for security reasons. However, a couple of mechanisms allow communication between applications. One such mechanism that you’ve seen throughout the book is Intents. Intents are asynchronous, meaning that you can post a message for someone to receive at some future point in time and just continue with your application.

Android中的每个应用程序都运行于独立的进程中。出于安全考虑，程序不可以直接访问另一个程序中的内容。但不同程序之间交换数据是允许的，为此Android提供了一系列的通信机制。其中之一是前面我们提到的Intent，它是一种异步的机制，在发送时不必等待对方响应。

% Every once in a while we need a more direct, synchronous access to another process. There are many ways to implement this across process boundaries, and collectively they are called Interprocess Communication, or IPC for short.

不过有时我们需要更直接一些，同步地访问其它进程中的数据。这类通信机制就叫做进程间通信(Interprocess Communication)，简称IPC。

% To allow cross-application communication, Android provides its own version of an IPC protocol. One of the biggest challenges in IPC is passing data around, such as when passing parameters to method calls on the remote systems. IPC protocols tend to get complicated because they have to convert data from its in-memory format to a format that’s convenient for sending to another process. This is called marshaling, and the unpacking at the receiver is called unmarshaling.

为实现进程间通信，Android设计了自己的IPC协议。IPC机制的设计难点在于数据的分发，比如何时传递数据、何时接受数据、如何序列化、如何反序列化，都有许多细节需要考虑，因此这个机制难免趋于复杂。

% To help with this, Android provides the Android Interface Definition Language, or AIDL. It is a lightweight implementation of IPC using a syntax that is very familiar to Java developers, and a tool that automatically creates the hidden code required to connect a client and a remote service.

为了简化开发者的工作，Android提供了Android接口描述语言(Android Interface Definition Language)，简称AIDL。这是一个轻量的IPC接口，使用Java开发者熟悉的语法形式，自动生成进程间通信中繁复的代码。

% To illustrate how to use AIDL to create interprocess communication, we’ll create two applications: a remote service called LogService and a client called LogClient that will bind to that remote service.

作为展示AIDL实现进程间通信的例子，我们将新建两个应用程序：一个是LogService，作为服务端；一个是LogClient，作为客户端与远程的LogService绑定。


% == Implementing the Remote Service ==
== 实现远程Service ==

% Our remote service, LogService, will simply allow remote clients to log a message to it.

LogService的功能很简单，就是接收并记录客户端发来的日志信息。

% We are going to start by creating the interface for the remote service. This interface represents the API, or set of capabilities that the service provides. We write this interface in AIDL language and save it in the same directory as our Java code with an .aidl extension.

首先申明远程Service的接口。接口就是API，表示Service对外提供的功能。我们使用AIDL语言编写接口，并保存到Java代码的相同目录之下，以``.aidl``为扩展名。

% The AIDL syntax is very similar to a regular Java interface. You simply define the method signature. The datatypes supported by AIDL are somewhat different from regular Java interfaces. But all Java primitive datatypes are supported. So are the String, List, Map, and CharSequence classes.

AIDL的语法与Java的接口(interface)十分相似，都是在里面给出方法的声明。不同在于，AIDL中允许的数据类型与一般的Java接口不完全一样。AIDL默认支持的类型有：Java中的基本类型，以及String、List、Map以及CharSequence等内置类。

% If you have a custom complex data type, such as a class, you need to make it Parcelable so that the Android run-time can marshal and unmarshal it. In this example, we’ll create a Message as a custom type.

要在AIDL中使用自定义类型(比如一个类)，你就必须让它实现``Parcelable``接口，允许Android运行时对它执行序列化/反序列化才行。在这个例子中，我们将创建一个自定义类型Message。


% === Writing the AIDL ===
=== 编写AIDL ===

% We start by defining the interface for our service. As you can see, the interface very much resembles a typical Java interface. For readers who might have worked with CORBA in the past, AIDL has its roots in CORBA’s IDL.

先定义Service的接口。如下可见，它与一般的Java接口十分相似。有CORBA经验的读者肯定可以认出AIDL与CORBA的IDL之间的渊源。

**Example 14.1. ILogService.aidl**
{CODE}
package com.marakana.logservice; // #{1}

import com.marakana.logservice.Message; // #{2}

interface ILogService { // #{3}
  void log_d(String tag, String message); // #{4}
  void log(in Message msg); // #{5}
}
{/CODE}

% + Just as in Java, our AIDL code specifies what package it’s part of.
% + However, unlike Java, we have to explicitly import other AIDL definitions even if they are in the same package.
% + We specify the name of our interface. Interface names conventionally start with I for interface.
% + This method is simple because it doesn’t return anything and takes only primitives as inputs. Note that the String class is not a Java primitive, but AIDL considers it to be one.
% + This method takes our custom Message parcel as its input. We’ll define Message next.

+ 同Java一样，AIDL代码也需要指明它所在的package；
+ 不同在于，即使在同一个package中，我们仍需显式地导入其它的AIDL定义。
+ 指定接口的名字。按照约定，名字以I字母开头。
+ 这个方法很简单，只有表示输入的参数而没有返回值。留意String不是Java的基本类型，不过AIDL把它当作基本类型对待。
+ 这个方法取我们自定义的Message对象作为输入参数。它的定义在后面给出。


% Next, we’ll look at the implementation of the Message AIDL.

接下来查看对应Message的AIDL的实现。

**Example 14.2. Message.aidl**
{CODE}
package com.marakana.logservice; // #{1}

/* #{2} */
parcelable Message;
{/CODE}

% - Specifies the package it’s in.
% - Declares that Message is a parcelable object. We will define this object later in Java.

+ 指明所在的package。
+ 声明Message是一个可序列化(parcelable)的对象。这个对象将在Java中定义。


% At this point, we are done with the AIDL. As you save your files, Eclipse automatically builds the code to which the client will connect, called the stub because it looks like a complete method to the client but actually just passes on the client request to your remote service. The new Java file is located in Gen folder under /gen/com/marakana/logservice/LogService.java. Because this file is derived from your AIDL, you should never modify it. The aidl tool that comes with the Android SDK will regenerate it whenever you make any changes to your AIDL files.

到这里我们已经完成了AIDL部分。在你保存文件的同时，Eclipse会自动生成服务端相关代码的stub。它像是完整的一个服务端，可以接受客户端的请求，但实际上里面并没有任何业务逻辑。这就是为什么称它为“stub”，具体的业务逻辑还需要我们自己添加。新生成的Java文件位于Gen目录之下，地址是``/gen/com/marakana/logservice/LogService.java``。因为这些代码是根据AIDL生成的，因此不应再做修改。正确的做法是，修改AIDL文件，然后使用Android SDK的aidl工具重新生成。

%TALK: stub没想出好的译法。

% Now that we have the AIDL and the generated Java stub, we are ready to implement the service.

有了AIDL和生成的Java stub文件，接下来实现这个Service。


% === Implementing the Service ===
=== 实现Service ===

% Just like any Android service, we implement LogService in a Java class that subclasses the system Service class. But unlike our earlier Service implementations, where we ignored onBind() but implemented onCreate(), onStartCommand(), and onDestroy(), here we’re going to do the opposite. A method in a remote service starts when the client makes its request, which is called binding to the service, and therefore the client request triggers the service’s onBind() method.

同Android中的其它Service一样，LogService也必须以系统中的Service类为基类。但不同在于，在这里我们忽略了``onCreate()``、``onStartCommand()``、``onDestroy()``几个方法，却提供了``onBind()``方法的实现。远程Service中的方法开始于客户端发出的请求，在客户端看来，这被称作“绑定(bind)到Service”。而对服务端而言，就是在这时触发Service类的``onBind()``方法。

% To implement our remote service, we’ll return an IBinder object from the onBind() method in our service class. IBinder represents the implementation of the remote service. To implement IBinder, we subclass the ILogService.Stub class from the auto-generated Java code, and provide the implementation for our AIDL-defined methods, in this case various log() methods.

在远程Service的实现中，``onBind()``方法需要返回一个IBinder对象表示远程Service的一个实现。为实现IBinder，我们可以继承自动生成的ILogervice.Stub类。同时在里面提供我们自定义的AIDL方法，也就是几个``log()``方法。

Example 14.3. LogService.java
{CODE}
package com.marakana.logservice;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.os.RemoteException;
import android.util.Log;

public class LogService extends Service { // #{1}

  @Override
  public IBinder onBind(Intent intent) { // #{2}
    final String version = intent.getExtras().getString("version");

    return new ILogService.Stub() { // #{3}

      public void log_d(String tag, String message) throws RemoteException { // #{4}
        Log.d(tag, message + " version: " + version);
      }

      public void log(Message msg) throws RemoteException { // #{5}
        Log.d(msg.getTag(), msg.getText());
      }
    };
  }

}
{/CODE}



% - LogService is an Android class derived from Service. We’ve seen many services, but this time around, it’s a bound service as opposed to UpdaterService, which was unbound.
% - Since this is a bound service, we must implement onBind() and have it return a correct instance of IBinder class. The client passes us an Intent, from which we extract some string data. During the client implementation, we’ll see how it sets this, and thus how we can pass small amounts of data into the remote service as part of the binding process.
%NOTE: 此process非"进程"。
% - This instance of IBinder is represented by ILogService.Stub(), a helper method that is generated for us in the Java stub file created by the aidl tool when we saved our AIDL interface. This code is part of /gen/com/marakana/logservice/LogService.java.
% - log_d() is the simple method that takes two strings and logs them. Our implementation simply invokes the system’s Log.d().
% - We also provide a log() method that gets our Message parcel as its input parameter. Out of this object we extract the tag and the message. Again, for this trivial implementation, we just invoke Android’s logging mechanism.

+ LogService以Android框架的Service为基类。前面已经见过不少Service，但这里与众不同。
+ 它是个Bound Service，因此必须提供``onBind()``的实现，使之返回一个IBinder的实例。参数是客户端传来的Intent，里面包含一些字符串信息。在客户端的实现部分，我们将介绍在Intent中附带少量数据并传递给远程Service的方法。
+ IBinder的实例由``ILogService.Stub()``方法生成，它是自动生成的stub文件中的一个辅助方法，位置在``/gen/com/marakana/logservice/LogService.java``。
+ log_d()是个简单的方法，它取两个字符串作参数，并记录日志。简单地调用系统的``Log.d()``即可。
+ 还有一个``log()``方法，它取可序列化的Message对象做参数。在此提取出Tag与消息内容，调用Android框架的``Log.d()``方法。


% Now that we have implemented the service in Java, we have to provide the Java implementation of the Message parcel as well.

现在我们已经实现了Java的Service部分，接下来实现可序列化的Message对象。


% === Implementing a Parcel ===
=== 实现一个Parcel ===

% Since Message is a Java object that we’re passing across processes, we need a way to encode and decode this object—marshal and unmarshal it—so that it can be passed. In Android, the object that is capable of doing that is called a Parcel and implements the Parcelable interface.

进程间传递的Message也是个Java对象，在传递与接收之间我们需要额外进行编码/解码——也就是序列化/反序列化。在Android中，可以序列化/反序列化的对象就被称作Parcel，作为Parcelable接口的实例。

% To be a parcel, this object must know how to write itself to a stream and how to recreate itself.

作为Parcel，对象必须知道如何处理自身的编码/解码。

**Example 14.4. Message.java**
{CODE}
package com.marakana.logservice;

import android.os.Parcel;
import android.os.Parcelable;

public class Message implements Parcelable { // #{1}
  private String tag;
  private String text;

  public Message(Parcel in) { // #{2}
    tag = in.readString();
    text = in.readString();
  }

  public void writeToParcel(Parcel out, int flags) { // #{3}
    out.writeString(tag);
    out.writeString(text);
  }

  public int describeContents() { // #{4}
    return 0;
  }

  public static final Parcelable.Creator<Message> CREATOR = new Parcelable.Creator<Message>() { // #{5}

    public Message createFromParcel(Parcel source) {
      return new Message(source);
    }

    public Message[] newArray(int size) {
      return new Message[size];
    }

  };

  // Setters and Getters #{6}
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }

  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

}
{/CODE}


% + As we said before, Message implements the Parcelable interface.
% + To be parcelable, this object must provide a constructor that takes in a Parcel and recreates the object. Here we read the data from the parcel into our local variables. The order in which we read in data is important: it must correspond to the order in which the data was written out as well.
% + writeToParcel() is the counterpart to the constructor. This method is responsible for taking the current state of this object and writing it out into a parcel. Again, the order in which variables are written out must match the order in which they are read in by the constructor that gets this parcel as its input.
% + We’re not using this method because we have no special objects within out parcel.
% + A parcelable object must provide a Creator. This Creator is responsible for creating the object from a parcel. It simply calls our other methods.
% + These are just various setter and getter methods for our private data.

+ 如前所说，Message需实现Parcelable接口。
+ 作为Parcelable接口的实现，类中必须相应地提供一个构造函数，使之可以根据Parcel重新构造原先的对象。在这里，我们将Parcel中的数据存入局部变量，注意其中的顺序很重要，必须与写入时的顺序保持一致。
+ ``writeToParcel()``方法对应于构造函数。它读取对象当前的状态，并写入Parcel。同上，变量的写入顺序必须与前面读取的顺序保持一致。
+ 此方法留空。因为这个Parcel中没有别的特殊对象。
+ 每个Parcelable对象必须提供一个Creator。这个Creator用于依据Parcel重新构造原先的对象，在此仅仅调用其它方法。
+ 一些私有数据的getter/setter方法。


% At this point, we have implemented the required Java code. We now need to register our service with the Manifest file.

至此服务端的Java部分已告一段落，接下来将Service注册到Manifest文件。


% === Registering with the Manifest File ===
=== 注册到Manifest文件 ===


% As always, whenever we provide one of the new main building blocks for applications, we must register it with the system. The most common way to do that is to define it in the Manifest file.

只要新加入了一个构件，就需要将它注册到系统。而注册到系统的最简单方法，就是注册到Manifest文件。

% Just as we registered UpdaterService before, we provide a <service> element specifying our service. The difference this time around is that this service is going to be invoked remotely, so we should specify what Action this service responds to. To do that, we specify the action and the Intent Filter as part of this service registration.

同前面注册UpdaterService一样，这里也是通过<service>标签表示Service。不同在于这里的Service将被远程调用，因此它负责响应的Action也有不同，这在<action>标签下的<intent-filter>标签中指明。

{CODE}
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
  package="com.marakana.logservice" android:versionCode="1"
  android:versionName="1.0">
  <application android:icon="@drawable/icon" android:label="@string/app_name">

  <!-- #{1} -->
    <service android:name=".LogService">
      <!-- #{2} -->
      <intent-filter>
        <action android:name="com.marakana.logservice.ILogService" />
      </intent-filter>
    </service>

  </application>
  <uses-sdk android:minSdkVersion="4" />
</manifest>
{/CODE}


% + This is where we define our service. It is a <service> element within the application block.
% + The difference between this service and our UpdaterService is that this service is going to be remote to the client, so calling it by an explicit class name wouldn’t work well since the client may not have access to the same set of classes. So instead we provide the Intent filter and action to which this service is registered to respond.

+ 在这里给出Service的定义。
+ 这个Service与UpdaterService的不同在于，它为远程客户端所调用，但客户端那边并没有这个类，所以不能通过类名直接调用。客户端能做的是发送Intent，使之作出响应。为此，通过<intent-filter>与<action>设置相应的过滤规则。


% At this point, our service is complete. We can now move on to the client implementation.

到这里，Service已经完成。下面是客户端的实现。


% == Implementing the Remote Client ==
== 实现远程客户端 ==

% Now that we have the remote service, we are going to create a client that connects to that service to test that it all works well. Note that in this example we purposely separated the client and the server into two separate projects with different Java packages altogether, in order to demonstrate how they are separate apps.

我们已经有了远程Service，接下来实现它的客户端，然后测试两者是否工作正常。我们这里有意将服务端与客户端分在两个不同的package中，因为它们是两个独立的程序。

% So we’re going to create a new Android project in Eclipse for this client, just as we’ve done before for various other applications. However, this time around we are also going to make this project depend on the LogService project. This is important because LogClient has to find the AIDL files we created as part of LogService in order to know what that remote interface looks like. To do this in Eclipse:

所以我们将在Eclipse里创建新Android工程来开发客户端，就像在之前的其他几个应用程序做的那样。然而这次我们让这个工程依赖于LogService工程。这点十分重要，因为LogClient需要找到用来构成LogService的AIDL文件，来清楚远程接口是个什么样子。要这么做在Eclipse里：

好，在Eclipse中新建一个项目，步骤同以前一样，兹不赘述。不过这里有一点不同，那就是它依赖于前一个项目，也就是LogService。这是因为LogClient需要知道LogService的接口，这就在AIDL文件。添加依赖的步骤如下：

% - After you have created your LogClient project, right-click on your project in Package Explorer and choose Properties.
% - In the "Properties for LogClient" dialog box, choose Java Build Path, then click on the Projects tab.
% - In this tab, click on "Add…" and point to your LogService project.

- 创建LogClient项目之后，在Package Explorer中右击该工程，选择Properties。
- 在``Properties for LogClient``对话框，选择``Java Build Path``，然后选择Properties标签。
- 在这一标签中，单击``Add…``指向LogService工程。

% This procedure will add LogService as a dependent project for LogClient.

以上，即将LogService加入LogService的工程依赖。


% === Binding to the Remote Service ===
=== 绑定到远程Service ===

% Our client is going to be an activity so that we can graphically see it working. In this activity, we’re going to bind to the remote service and from that point on use it as if it was just like any other local class. Behind the scenes, the Android binder will marshal and unmarshal the calls to the service.

客户端可以是一个Activity，这样我们可以在图形界面中看出它的工作状况。在这个Activity中，我们将绑定到远程Service，随后就可以像一个本地的Service那样使用它了。Android的Binder将自动处理其间的序列化/反序列化操作。

% The binding process is asynchronous, meaning we request it and it happens at some later point in time. To handle that, we need a callback mechanism to handle remote service connections and disconnections.

绑定操作是异步的，我们先发出请求，至于具体的操作可能会在稍后进行。为此，我们需要一个回调机制来响应远程服务的连接和断开。

% Once we have the service connected, we can make calls to it as if it was any other local object. However, if we want to pass any complex data types, such as a custom Java object, we have to create a parcel for it first. In our case, we have Message as a custom type, and we have already made it parcelable.

连接上Service之后，我们就可以像本地对象那样使用它了。不过，要传递复杂的数据类型(比如自定义的Java对象)，就必须把它做成Parcel。对我们的Message类型而言，它已经实现了Parcelable接口，拿来直接使用即可。

**Example 14.5. LogActivity.java**
{CODE}
package com.marakana.logclient;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.IBinder;
import android.os.Parcel;
import android.os.RemoteException;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;

import com.marakana.logservice.ILogService;
import com.marakana.logservice.Message;

public class LogActivity extends Activity implements OnClickListener {
  private static final String TAG = "LogActivity";
  ILogService logService;
  LogConnection conn;

  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    // Request bind to the service
    conn = new LogConnection(); // #{1}
    Intent intent = new Intent("com.marakana.logservice.ILogService"); // #{2}
    intent.putExtra("version", "1.0"); // #{3}
    bindService(intent, conn, Context.BIND_AUTO_CREATE); // #{4}

    // Attach listener to button
    ((Button) findViewById(R.id.buttonClick)).setOnClickListener(this);
  }

  class LogConnection implements ServiceConnection { // #{5}

    public void onServiceConnected(ComponentName name, IBinder service) { // #{6}
      logService = ILogService.Stub.asInterface(service); // #{7}
      Log.i(TAG, "connected");
    }

    public void onServiceDisconnected(ComponentName name) { // #{8}
      logService = null;
      Log.i(TAG, "disconnected");
    }

  }

  public void onClick(View button) {
    try {
      logService.log_d("LogClient", "Hello from onClick()"); // #{9}
      Message msg = new Message(Parcel.obtain()); // #{10}
      msg.setTag("LogClient");
      msg.setText("Hello from inClick() version 1.1");
      logService.log(msg); // #{11}
    } catch (RemoteException e) { // #{12}
      Log.e(TAG, "onClick failed", e);
    }

  }

  @Override
  protected void onDestroy() {
    super.onDestroy();
    Log.d(TAG, "onDestroyed");

    unbindService(conn); // #{13}

    logService = null;
  }
}
{/CODE}


% + LogConnection is our class that connects to, and handles disconnections from, the remote service. The class is explained later.
% + This is the action Intent that we’re using to connect to the remote service. It must match the action that LogService specified in the Manifest file as part of its Intent filter.
% + Here is where we add the data to the Intent, to be extracted by the remote method.
% + bindService() is the method you use to ask the Android runtime to bind this activity to the remote service specified by the Intent action. In addition to the Intent, we pass on the Service Connection class to handle the actual connection. The BIND_AUTO_CREATE flag indicates that if the service we’re trying to connect to doesn’t already exist, it should be created.
% + LogConnection is the class that will be called back upon successful connection to the remote service, and whenever the service disconnects. This class needs to subclass ServiceConnection and implement onServiceConnected() and onServiceDisconnected().
% + onServiceConnected() is called once the bind succeeded. At this point, the IBinder instance represents our remote service.
% + We now need to cast the bound service into our LogService instance. To do that, we use a helper method named ILogService.Stub.asInterface(), provided by that Java stub that was created automatically by the aidl tool when we saved our AIDL files.
% + onServiceDisconnected() is called once the remote service is no longer available. It is an opportunity to handle any necessary cleaning up. In this case, we just set logService to null to help with the garbage collection.
% + Assuming that we have successfully bound to the remote service, we can now make calls to it as if it was a local call. logService.log_d() simply passes two strings to the log_d() method that we saw defined in LogService.

% + As mentioned earlier, if we want to pass a Message to the remote method, we have to create a parcel out of it first. This is possible because Message is a parcelable object. We then set it its properties using appropriate setters.
% + Once we have the parcel, we simply call logService.log() and pass it to LogService, where it gets logged.
% + Whenever we make a remote call, it could fail for variety of reasons outside of our control. Because of that, it is a good practice to handle a possible RemoteException.
% + When this activity is about to be destroyed, we ask to unbind the service and free those resources.

+ LogConnection用于处理远程Service的连接/断开。具体将在后面介绍。
+ 它是一个Action Intent，用于连接到远程Service。它必须与Manifest文件中LogService相应<intent-filter>部分的Action相匹配。
+ 把数据加入Intent，它可以在另一端解析出来。
+ bindService()请求Android运行时将这个Action绑定到相应的远程Service。在Intent之余，我们也传递一个远程Service的ServiceConnection对象，用以处理实际的连接/断开操作。
+ LogConnection用来处理远程Service的连接/断开。它需要以ServiceConnection为基类，提供``onServiceConnected()``与``onServiceDisconnected()``的实现。
+ 我们需要将这个Bound Service转换为LogService类型。为此，调用辅助函数``ILogService.Stub.asInterface()``。
+ ``onServiceDisconnected()``在远程Service失效时触发。可以在里面执行一些必要的清理工作。在这里，我们仅仅将logService设为null，方便垃圾收集器的回收。
+ 如果成功绑定了远程Service，那就可以像调用本地方法那样调用它了。在前面LogService的实现部分曾提到，``logService.log_d()``所做的工作就是将两个字符串传递给``log_d()``。
+ 如前所说，如果需要在远程调用中传递自定义对象，那就必须先把它做成Parcel。既然Message已经是Parcelable对象，将它作为参数传递即可。
+ 得到Parcel之后，简单调用logService.log()方法，将它传递给LogService。
+ 远程调用可能会很不稳定，因此最好加入一个针对RemoteException的错误处理。
+ 在Activity将要销毁之前，解除Service的绑定以释放资源。


% At this point our client is complete. There’s a simple UI with a single button that triggers an onClick() call. Once the user clicks the button, our client should be invoking the remote call in the service.

到这里，客户端已经完工。它的界面很简单，只有一个触发``onClick()``调用的按钮。只要用户点击按钮，我们的客户端程序就会调用一次远程Service。

% === Testing That All Works ===
=== 测试运行 ===

% Try to run the client from within Eclipse. Since Eclipse knows that LogClient is dependent on LogService, it should install both packages onto your device. Once the client starts, it should bind to the service. Try clicking on the button and check that LogService is indeed logging. Your adb logcat call should give you something like this:

尝试在Eclipse中运行客户端。Eclipse知道LogClient与LogService之间的依赖关系，因此会在设备中同时安装这两个package。客户端程序启动之后，应该会绑定到Service。尝试点击按钮，检查LogServic的日志操作。adb中的logcat输出应如下：

{CODE}
...
I/LogActivity(  613): connected
...
D/LogClient(  554): Hello from onClick() version: 1.0
D/LogClient(  554): Hello from inClick() version 1.1
...
{/CODE}


% The first line is from LogConnection in the client, indicating that we’ve successfully bound to the service. The other two lines are from the remote service, one for LogService.log_d() and the other one for LogService.log(), where we passed in the Message parcel.

第一行来自客户端的LogConnection，表示成功绑定到远程Service。后两行来自于远程Service，一个来自``LogService.log_d()``，取两个字符串做参数；另一个来自``LogService.log()``，取一个Message对象的Parcel做参数。

% If you run adb shell ps to see the running processes on your device, you’ll notice two separate line items for the client and the server:

在adb shell中运行ps命令查看设备中的进程，你将可以看到两个条目，分别表示客户端与服务端。

{CODE}
app_43    554   33    130684 12748 ffffffff afd0eb08 S com.marakana.logservice
app_42    613   33    132576 16552 ffffffff afd0eb08 S com.marakana.logclient
{/CODE}

% This indicates that indeed the client and server are two separate applications.

由此可以证明，客户端与服务端是两个独立的应用程序。

% == Summary ==
== 总结 ==

% Android provides an interprocess communication mechanism. It is based on binder: a high-performance, shared-memory system. To create create a remote service, we define it using the Android Interface Definition Language (AIDL), similar to Java interfaces. We then implement the remote interface and connect to it via the IBinder object. This allows us to connect our client to a remote service in a different process altogether.

Android提供了一套高性能的基于共享内存的进程间通信机制，这就是Bound Service。通过它可以创建出远程的Service：先在Android接口描述语言(AIDL)中给出定义，然后实现IBinder对象。这就允许将无关的进程相互连接起来。
