% 
% 
% 
% = Broadcast Receivers =
= Broadcast Receiver =


% In this chapter, you will learn what Broadcast receivers are and when to use them. We’ll create couple of different receivers illustrating different usage scenarios. First, you’ll create a broadcast receiver that will start up your update service at boot time, so that users always have their latest friends' timelines the first time they check for them (assuming their preferences are set). Next, you will create a receiver that will update the timeline when it changes while the user is viewing it. This will illustrate the programmatic registration of receivers and get you introduced to broadcasting intents. We’ll implement a receiver that is trigged by changes in network availability. And finally, we’ll learn how to surround our app with some security by defining permissions.

本章介绍Broadcast Receiver的相关知识，以及它在不同场景中的不同应用。在这里，我们将创建几个Broadcast Receiver作为实例，分别用以实现在开机时启动UpdaterService、即时更新Timeline、响应网络连接状态的变化。此外，我们还需要将它们注册到应用程序，也需要对广播的Intent有所理解。最后，我们将明确地为应用程序赋予相关的权限，以保证安全。

% By the end of this chapter, your app has most of the functionality that a user would need. The app can send status updates, get friends' timelines, update itself, and start automatically. It works even when the user is not connected to the network (although of course it cannot send or receive new messages).

到本章结束，我们即可完成应用的大部分功能，比如发送消息、获取Timeline、即时更新Timeline以及自动启动等等。而且，在网络断开的时候，它依然可以运行(但不能收发数据)。

% == About Broadcast Receivers ==
== 关于Broadcast Receiver ==

% Broadcast receivers are Android’s implementation of the Publish/Subscribe messaging pattern, more precisely is an Observer pattern. Applications (known as publishers) can generate broadcasts to simply send events not knowing who, if anyone, will get them. Receivers (known as subscribers) that want the information subscribe to specific messages via filters. If the message matches a filter, the subscriber is activated (if it’s not already running) and notified of the message.

Broadcast Receiver是Android中发布/订阅机制(又称为Observer模式)的一种实现。应用程序作为发布者，可以广播一系列的事件，而不管接收者是谁。Receiver作为订阅者，从发布者那里订阅事件，并过滤出自己感兴趣的事件。如果某事件符合过滤规则，那么订阅者就被激活，并得到通知。

% As you may recall from Chapter 4, Main Building Blocks, a BroadcastReceiver is a piece of code to which an app subscribes in order to get notified when an action happens. That action is in a form of an intent broadcast. When the right intent is fired, the receiver wakes up and executes. The "wakeup" happens in form of a onReceive() callback method.

我们曾在第四章提到过，``Broadcast Receiver``是应用程序针对事件做出响应的相关机制，而事件就是广播发送的Intent。Receiver会在接到Intent时唤醒，并触发相关的代码，也就是``onReceive()``。

% == BootReceiver ==
== BootReceiver ==

% In our Yamba application, the UpdaterService is the one responsible for periodically updating the data from the online service. Currently, the user needs to manually start the service, which she does by first starting the application, then clicking on Start Service menu option.

在Yamba中，UpdaterService负责在后台定期抓取数据。但现在只能在打开应用之后，让用户在菜单中选择``Start Service``手工启动它才会开始执行。这样显然是不友好的。

% It would be much cleaner and simpler if somehow UpdaterService was started automatically by the system when the device is powered up. To do this, we create BootReceiver, a broadcast receiver that will get launched by the system when the boot is complete, and in turn will launch our TimelineActivity activity. The following few lines sets up our broadcast receiver.

如果UpdaterService能够随着系统启动而启动，那就可以省去用户的手工操作了。为此，我们将新建一个Broadcast Receiver用以响应系统启动的事件，也就是``BootReceiver``，并由它负责启动UpdaterService。

% TALK: 怀疑是原文错误： and in turn will launch our TimelineActivity activity. 根据下面的代码看应该是 UpdaterService
% TALK: 支持楼上。

**Example 11.1. BootReceiver.java**
{CODE}
package com.marakana.yamba6;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.util.Log;

public class BootReceiver extends BroadcastReceiver { // #{1}

  @Override
  public void onReceive(Context context, Intent intent) { // #{2}
    context.startService(new Intent(context, UpdaterService.class)); // #{3}
    Log.d("BootReceiver", "onReceived");
  }

}
{/CODE}


% + We create BootReceiver by subclassing BroadcastReceiver, the base class for all receivers.
% + The only method that we need to implement is onReceive(). This method gets called when an intent matches this receiver.
% + We launch an intent to start our Updater service. The system passed us a Context object when it invoked our onReceive() method, and we are expected to pass it on to the Updater service. The service doesn’t happen to use the Context object for anything, but we’ll see an important use later for a context.

+ ``BootReceiver``继承自``BroadcastReceiver`` ，它是所有Receiver的基类。
+ 我们只需实现一个方法，那就是``onReceive()``。它将在收到符合过滤规则的Intent时触发。
+ 通过Intent启动UpdaterService。``onReceive()``在触发时可以得到一个Context对象，我们将它原样传给UpdaterService。对现在的UpdaterService而言，这个Context对象并不是必需的，但稍后我们就能够发现它的重要性。


% At this point, we have our boot receiver. But, in order for it to get called - in order for the activity to start at boot - we must register it with the system.

到这里，我们已经实现了BootReceiver，但还没有将它注册到系统，因此仍无法响应来自系统的事件。

% === Registering the BootReceiver with the AndroidManifest file ===
=== 将BootReceiver注册到Manifest文件===


% To register BootReceiver, we add it to the manifest file. We also add an intent filter to it. This intent filter specifies which broadcasts trigger the receiver to get activated.

要将BootReceiver注册到系统，我们需要在Manifest文件中添加它的声明，还需要定义它的intent-filter，用以过滤出自己关心的事件。


**Example 11.2. AndroidManifest.xml: 在<application>标签之下**
{CODE}
...
<receiver android:name=".BootReceiver">
  <intent-filter>
    <action android:name="android.intent.action.BOOT_COMPLETED" />
  </intent-filter>
</receiver>
...
{/CODE}


% In order to get notifications for this particular intent filter, we must also specify that we’re using a specific permission required by it, in this case android.permission.RECEIVE_BOOT_COMPLETED.

针对某特定事件，在声明了它的intent-filter之后，还需要赋予应用程序以相应的权限。在这里就是``android.permission.RECEIVE_BOOT_COMPLETED``。

**Example 11.3. AndroidManifest.xml: 在<manifest>标签之下**
{CODE}
...
<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
...
{/CODE}


{NOTE}
% If we don’t specify the permission we require, we simply won’t get notified when this event occurs, and we won’t have the chance to run our start-up code. We won’t even know we aren’t getting notified, so this is potentially a hard bug to find.

如果不声明权限，那么在事件发生时应用程序就会得不到通知，也就无从执行响应的代码。不幸的是，程序根本无法察觉事件丢失的情况，也没有任何错误提示，出现bug的话将很难调试。
{/NOTE}


% === Testing the Boot Receiver ===
=== 测试 BootReceiver ===

% At this point, you can reboot your device. Once it comes back up, your UpdaterService should be up and running. You can verify that either by looking at the LogCat for our output, or by using System Settings and checking that the service is running.

接下来重启设备。重启之后若一切正常，UpdaterService就应该处于运行状态了。你可以通过LogCat的输出来验证它是否启动成功，也可以通过System Settings查看它是否存在于当前正在运行的Service列表。

% To verify via System Settings, at the Home screen, click on th Menu button and choose Settings→Applications→Running Services. You should see UpdaterService listed there. At this point, you know the BootReceiver did indeed get the broadcast and has started the UpdaterService.

通过System Settings的话，可以回到主屏幕，点击菜单按钮，选择``Settings→Applications→Running Services``。如果正常，即可在列表中见到UpdaterService，表示BootReceiver已经收到了系统广播的事件，并成功地启动了Service。


% == The TimelineReceiver ==
== TimelineReceiver ==

% Currently, if you view your Timeline activity while a new status update comes in, you wouldn’t know about it. That’s because the UpdaterService doesn’t have a way to notify TimelineActivity to refresh itself.

目前，UpdaterService可以定期抓取最新的消息数据，但它无法通知``TimelineActivity``。因此Timeline界面仍不能做到及时更新。

% To address this, we create another broadcast receiver, this time as an inner class of TimelineActivity.

为解决这一问题，我们将创建另一个BroadcastReceiver，使它作为``TimelineActivity``的内部类。

**Example 11.4. TimelineActivity.java，内部类TimelineReceiver**
{CODE}
...
class TimelineReceiver extends BroadcastReceiver { // #{1}
  @Override
  public void onReceive(Context context, Intent intent) { // #{2}
    cursor.requery(); // #{3}
    adapter.notifyDataSetChanged(); // #{4}
    Log.d("TimelineReceiver", "onReceived");
  }
}
...
{/CODE}


% + As before, to create a broadcast receiver, we subclass BroadcastReceiver class.
% + The only method we need to override is onReceive(). This is where we put the work we want done when this receiver is triggered.
% + The work we want done is simply to tell the cursor object to refresh itself. We do this by invoking requery(), which executes the same query that was executed initially to obtain this cursor object.
% + Notifies the adapter that underlying data has changed.

+ 同前面一样，Broadcast Receiver都是以``BroadcastReceiver``作为基类。
+ 唯一需要实现的方法是``onReceive()``。其中的代码会在Receiver被触发时执行。
+ 通知``cursor``对象刷新自己。对此，只需调用``requery()``方法，重新执行它的上一次数据查询就可以了。
+ 通知adapter对象，它的内部数据已经被修改。


% At this point, our receiver is ready but not registered. Unlike BootReceiver, where we registered our receiver with the system statically, via the manifest file, we’ll register TimelineReceiver programmatically. This is because TimelineReceiver makes sense only within TimelineActivity as it’s purpose is to refreshing the list when the user is looking at Timeline Activity.

要让Receiver正常工作，我们还需要将它注册。不过这里不像刚才的``BootReceiver``那样在Manifest文件中添加声明就好，我们需要动态地注册TimelineReceiver。因为``TimelineReceiver``仅在用户查看Timeline界面时才有意义，将它静态地注册到Manifest文件的话，会导致无谓地浪费资源。

%TALK: 上面翻译中加了一句。类似的情景可以在"系统服务"一章中见到，在Activity休眠时没必要注册系统服务，不然会浪费资源。

**Example 11.5. TimelineActivity.java中的内部类TimelineReceiver**
{CODE}
...
@Override
protected void onResume() {
  super.onResume();

  // Get the data from the database
  cursor = db.query(DbHelper.TABLE, null, null, null, null, null,
      DbHelper.C_CREATED_AT + " DESC");
  startManagingCursor(cursor);

  // Create the adapter
  adapter = new TimelineAdapter(this, cursor);
  listTimeline.setAdapter(adapter);

  // Register the receiver
  registerReceiver(receiver, filter);   // #{1}
}

@Override
protected void onPause() {
  super.onPause();

  // UNregister the receiver
  unregisterReceiver(receiver);  // #{2}
}
...
{/CODE}


% + We register the receiver in onResume() so that it’s registered whenever the TimelineActivity is running. Recall that all paths to the Running state go through the onResume() method, as described in the section called “Running State”.
% + Similarly, we unregister the receiver on the way to the Stopped state (recall the section called “Stopped State”). onPause() is a good place to do that.

+ 在``TimelineActivity``进入Running状态时注册Receiver。前面在//"Running状态"//一节中曾提到，在Activity进入Running状态之前，肯定要经过``onResume()``。因此，这里是注册Receiver的好地方。
+ 与之相对，Activity在进入Stopped状态之前，肯定会经过``onPause()``。可以在这里注销Receiver。


% What’s missing now is the explanation of what filter is. To specify what triggers the receiver, we need an instance of IntentFilter, which simply indicates which intent actions we want to be notified about. In this case, we make up an action string through which we filter intents.

前面还剩一个``filter``对象没解释：它是一个``IntentFilter``的实例，用以过滤出Receiver感兴趣的事件。在这里，我们通过一条表示Action事件的字符串来初始化它。

**Example 11.6. TimelineActivity.java，修改后的 onCreate()**
{CODE}
...
filter = new IntentFilter("com.marakana.yamba.NEW_STATUS"); // #{1}
...
{/CODE}

% + Create a new instance of IntentFilter to filter for the com.marakana.yamba.NEW_STATUS intent action. Since this is a text constant, we’ll define it as such and refer to it as a constant later on. A good place to define it is the UpdaterService, because that’s the code that generates the events we’re waiting for.

+ 创建IntentFilter的实例，以``com.marakana.yamba.NEW_STATUS``作为构造函数的参数，表示一条Action事件。在这里使用了一个字符串，以后可以将它定义成常量，方便在其它地方使用。


% == Broadcasting Intents ==
== 广播 Intent ==

% Finally, to trigger the filter, we need to broadcast an intent that matches the action that the intent filter is listening for. In case of BootReceiver, earlier, we didn’t have to do this because the system was already broadcasting the appropriate intent. However, for TimelineReceiver, the broadcast is ours to do because the intent is specific to our application.

最后，为触发这个事件，我们需要广播一条能够匹配filter的Intent。前面的``BootReceiver``只管接收来自系统的广播，也就没必要负责发送Intent。但对``TimelineReceiver``来说，它接收的广播是来自应用程序本身，发送Intent也就需要我们自己负责了。

% If you recall from Chapter 8, Services, our UpdaterService had an inner class called Updater. This was the separate thread that connected to the online service and pulled down the data. Becausee this is where we know whether or not there are any new statuses, this is a good place to send notifications from as well.

在第八章 Service 中，我们为``UpdaterService``创建了一个内部类``Updater``，负责在独立的线程中连接到服务端并抓取数据。第一手数据在它手里，因此由它负责发送通知是合理的。

**Example 11.7. UpdaterService.java， 内部类Updater**
{CODE}
...
private class Updater extends Thread {
  Intent intent;

  public Updater() {
    super("UpdaterService-Updater");
  }

  @Override
  public void run() {
    UpdaterService updaterService = UpdaterService.this;
    while (updaterService.runFlag) {
      Log.d(TAG, "Running background thread");
      try {
        YambaApplication yamba =
            (YambaApplication) updaterService.getApplication(); // #{1}
        int newUpdates = yamba.fetchStatusUpdates();  // #{2}
        if (newUpdates > 0) { // #{3}
          Log.d(TAG, "We have a new status");
          intent = new Intent(NEW_STATUS_INTENT); // #{4}
          intent.putExtra(NEW_STATUS_EXTRA_COUNT, newUpdates); // #{5}
          updaterService.sendBroadcast(intent); // #{6}
        }
        Thread.sleep(60000); // #{7}
      } catch (InterruptedException e) {
        updaterService.runFlag = false; // #{8}
      }
    }
  }
}
...
{/CODE}


% + We get the application object to access our common application methods.
% + If you recall, our application provides fetchStatusUpdates() to get all the latest status updates and populate the database. This method returns the number of new statuses.
% + We check whether there are any new statutes at all.
% + This is the intent we are about to broadcast. NEW_STATUS_INTENT is a constant that represents an arbitrary action. In our case, we define it as com.marakana.yamba.NEW_STATUS, but it could be any string without spaces. However, using something that resembles your package name is a good practice.
% + There’s a way to add data to an Intent. In our case, it would be useful to communicate to others as part of this broadcast how many new statuses there are. In this line, we use Intent’s putExtra() method to add the number of new statuses under a key NEW_STATUS_EXTRA_COUNT, which is just our arbitrary constant.
% + At this point, we know there’s at least one new status. sendBroadcast() is part of Context, which is a superclass of Service and therefore also a superclass of our UpdaterService. Since we’re inside the Updater inner class, we have to refer to the parent’s updaterService instance in order to call sendBroadcast(). This method simply takes the intent we just created.
% + We tell this thread to sleep for a minute, so that it doesn’t overload the device’s CPU while checking regularly for updates.
% + In case this thread is interrupted for whatever reason, we update this service’s runFlag so we know it’s not running any more.

+ 获取Application对象的引用。
+ 前面我们曾在Application对象中实现了``fetchStatusUpdates()``方法，用以获取数据并写入数据库，并将获取数据的数量作为返回值返回。
+ 检查是否得到新数据。
+ 初始化Intent。``NEW_STATUS_INTENT``是一个常量，表示一项Action。在这里，它就是"com.marakana.yamba.NEW_STATUS"。Android并没有限制Action的名字，不过按照约定，一般都在它名字的前面加上package的名字。
+ 可以为Intent添加附加数据。在这里，通知他人新得到数据的数目是有意义的。因此通过``putExtra()``方法将一个数值加入Intent，并与一个键值(NEW_STATUS_EXTRA_COUNT)关联起来。
+ 我们已经确定得到了新数据，接下来就是将Intent广播出去。``sendBroadcast()``是个Context对象中的方法，而Service是Context的子类，因此也可以通过updaterService对象来调用``sendBroadcast()``。传入的参数就是刚刚创建的Intent。
+ 让线程休眠一分钟，避免CPU过载。
+ 如果线程被任何原因中断，则设置runFlag为false，表示Service已停止运行。

%TALK: 一分钟的设定很坑爹. -fle


{NOTE}
% UpdaterService may be sending broadcasts even when the TimelineReceiver` is not registered. That is perfectly fine. Those broadcasts will simply be ignored.

``UpdaterService``会持续广播着Intent，而不受``TimelineReceiver``影响。如果TimelineReceiver未被注册，则UpdaterService广播的Intent会被简单忽略。
{/NOTE}

% At this point, a new status received by UpdaterService causes an intent to be broadcast over to the TimelineActivity, where the message gets received by the TimelineReceiver, which in turn refreshes the ListView of statuses.

到这里，``UpdaterService``会在每次收到新数据时广播一条Intent。``TimelineReceiver``则可以接收到这些Intent，并更新TimelineActivity所显示的内容。


% == The Network Receiver ==
== NetworkReceiver ==

% With the current design, our service will start automatically at boot time and will attempt to connect to the cloud and retrieve latest updates approximately every minute. One of the problems with the current design is that the service will try to do so even when there’s no Internet connection available. This adds unnecessary attempts to wake up the radio and connect to the server, all of which is taxing the battery. Imagine how many wasteful attempts would be made while your phone is in Flight Mode on a cross-country flight. This highlights some of the inherit constraints for programming for mobile devices - we’re limited by the battery life and network connectivity.

现在，我们的Service已经可以跟随系统启动，并每分钟定时尝试连接服务端以获取数据。但这样的设计存在一个问题，那就是即使设备没有联网，程序仍定时试图连接服务端抓取数据，这样只会无谓地浪费电能。假如你正在坐一趟国际航班，上面没有网络连接，几个小时下来不难想像这将多么浪费。电能与网络连接情况都不是永久的，我们应尽量减少无谓的操作。

% A better approach would be to listen to network availability broadcasts and use that information to intelligently turn the service off when the Internet is unavailable and turn it back on when data connection comes back up. The system does send an intent whenever connection availability changes. Another system service allows us to find out what changed and act accordingly.

一个解决方案是监听网络的连接情况，并由它来决定Service的启动关闭。系统会在网络连接情况发生变化时发送一条Intent，另外也有系统服务可用于查看当前的网络连接情况。

% In this case, we’re creating another receiver, NetworkReceiver. Just as before, we need to create a Java class that subclasses BroadcastReceiver, and register it via the Android manifest file.

接下来，我们创建一个新的Receiver：``NetworkReceiver``。步骤同前面一样，新建一个Java类，并继承``BroadcastReceiver``，然后在Manifest文件中注册它。


**Example 11.8. NetworkReceiver.java**
{CODE}
package com.marakana.yamba6;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.util.Log;

public class NetworkReceiver extends BroadcastReceiver { // #{1}
  public static final String TAG = "NetworkReceiver";

  @Override
  public void onReceive(Context context, Intent intent) {

    boolean isNetworkDown = intent.getBooleanExtra(
        ConnectivityManager.EXTRA_NO_CONNECTIVITY, false);  // #{2}

    if (isNetworkDown) {
      Log.d(TAG, "onReceive: NOT connected, stopping UpdaterService");
      context.stopService(new Intent(context, UpdaterService.class)); // #{3}
    } else {
      Log.d(TAG, "onReceive: connected, starting UpdaterService");
      context.startService(new Intent(context, UpdaterService.class)); // #{4}
    }
  }

}
{/CODE}



% + As we said before, when you create a new broadcast receiver, you typically start by subclassing Android’s own BroadcastReceiver class.
% + When the system broadcasts the particular intent action that we are subscribed to get in this receiver, the intent will have an extra piece of information indicating if the network is up or down. In this case, the variable is a Boolean value keyed to the ConnectivityManager.EXTRA_NO_CONNECTIVITY constant. In the previous section we associated a value to a string of our own invention; here we’re on the other end of the message, extracting a value from a Boolean. A value of true indicates that the network is down.
% + If the network is down, we simply send an intent to our UpdaterService. We now have a use for the Context object that the system passed to this method. We call its stopService() method, passing the Intent.
% + If the flag was false, we know that the network has changed and is now available. So we start our UpdaterService, the inverse of our previous stop action.

+ 同前面一样，它也是``BroadcastReceiver``的子类。
+ 系统会在这条Intent中加入一组附加数据，表示网络的连接情况。也就是``ConnectivityManager.EXTRA_NO_CONNECTIVITY``所对应的布尔值。前面我们曾为自己的Intent加入附加数据，在这里相反，只管取出数据即可。若这个值为true，则表示网络断开。
+ 如果网络断开，则向UpdaterService发送一条Intent，令它停止。通过系统传入的Context对象。
+ 如果网络连接，则启动UpdaterService，与前面相反。


{NOTE}
% Inside an activity or a service, we simply used methods startActivity(), startService(), stopService() and so on. This is because activities and services are subclasses of Context and thus they inherited these methods. So, there’s an is-a relationship between them and Context. Broadcast Receivers on the other hand have Context object passed into it, thus having a has-a relationship with it.

在Activity或者Service中，我们可以直接调用``startActivity()``、``startService()``、``stopService()``等方法。这是因为Activity与Service都是Context的子类，它们自身就是一个Context对象。但BroadcastReceiver并不是Context的子类，因此发送Intent，仍需通过系统传递的Context对象。
{/NOTE}


% Now that we have created this new receiver, we need to register it with the manifest file:

新的Receiver已经编写完毕，接下来将它注册到Manifest文件。

**Example 11.9. AndroidManifest.xml: 在<application>标签之下**
{CODE}
...
<receiver android:name=".NetworkReceiver">
  <intent-filter>
    <action android:name="android.net.conn.CONNECTIVITY_CHANGE" />
  </intent-filter>
</receiver>
...
{/CODE}

% We also need to update the permissions that our application uses, because that particular action filter for a network change is protected and requires us to ask the user to grant us this particular permission.

我们还需要更新应用程序所需的权限。在系统中，网络连接状况是受保护的信息，要获取它，我们需要用户赋予应用程序以专门的权限。

**Example 11.10. AndroidManifest.xml: 在<manifest>标签之下**
{CODE}
...
<uses-permission android:name="android.permission.INTERNET" /> <!-- 1 -->
<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" /> <!-- 2 -->
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /> <!-- 3 -->
...
{/CODE}


% + Used by our Twitter object to connect to the Internet to get and post status updates. We saw this permission already in Chapter 6, Android User Interface. Not having this permission will cause our app to crash when it attempts to access the network (unless we catch and handle that network exception).
% + Required in order to receive broadcasts that the system has booted. As mentioned earlier, if we don’t have this permission, we will silently be ignored at boot time and our boot code won’t run.
% + Needed in order to receive network state updates. Just as with the boot receiver, if we don’t have this permission, we will be silently passed by when the network state changes.

+ 访问网络所需的权限。这是在第六章 //Android用户界面// 中定义的。如果没有这项权限，应用程序就无法连接到网络。
+ 监视系统启动所需的权限。如果没有这项权限，应用程序就无法捕获//系统启动//这一事件，而且没有任何错误提示。
+ 监视网络连接情况所需的权限。与上面相似，如果没有这项权限，应用程序就无法获知网络连接情况的变化，而且没有任何错误提示。


% == Adding Custom Permissions to Send and Receive Broadcasts ==
== 为广播消息添加自定义权限 ==

% As discussed in the section called “Updating Manifest File for Internet Permission”, an application must be granted permissions to access certain restricted features of the system, such as connecting to Internet, sending SMS messages, making phone calls, reading the user’s contacts, taking photos, and so on. It is user who has to grant all or none of the permissions to the application at installation time, and it is the job of the application developer to list all the permissions the app needs to successfully run by adding the <uses-permission> element to the manifest file. So far, we’ve added permissions to Yamba in order to access the Internet, kick off our boot-time service, and learn about network changes.
在前文中我们曾经讨论过，应用要访问某项系统功能必须显示的获取相应的权限，比如连接网络、发送短信、打电话、读取电话本、拍照等等。在安装软件时需要用户允许应用声明的全部权限，这些声明对应 manifest 文件中的 <uses-permission> 元素。目前我们为 Yamba 声明了网络权限、自动启动权限和监视网络条件的权限。

% But now that we have our Updater service sending a broadcast action to our Timeline receiver, we may want to restrict permission to send and receive that broadcast to our own app. Otherwise, it would be possible for another app, knowing what our action looks like, to send it and cause actions in our application that we didn’t intent.
但是程序中的 UpdaterService 使用广播来通知 TimelineActivity，我们希望限制其他程序发生或者接受这样的广播。否则只要知道了相应的 action 名称，其他程序就能发生或者接受我们的广播，这可能会带来意料外的问题。

% To fill up this security hole, we define our own permission and ask the user to grant it to the Yamba application. Next, we’ll enforce both sending and receiving of the permissions.
为了弥补这个安全漏洞，我们需要为 Yamba 定义需要用户许可的权限。然后为广播的发送和接受应用权限限制。


% === Declaring Permissions in the Manifest File ===
=== 在 Manifest 文件中定义权限 ===

% The first step is to declare our permissions, explaining what they are, how they are to be used, and what protection level they are at.
首先需要定义我们的权限，解释它们是什么、怎么使用、处于什么保护级别。

**Example 11.11. Adding Permissions to Manifest File**
{CODE}
<manifest>

  ...

  <permission android:name="com.marakana.yamba.SEND_TIMELINE_NOTIFICATIONS" <!-- 1 -->
    android:label="@string/send_timeline_notifications_permission_label" <!-- 2 -->
    android:description="@string/send_timeline_notifications_permission_description" <!-- 3 -->
    android:permissionGroup="android.permission-group.PERSONAL_INFO" <!-- 4 -->
    android:protectionLevel="normal" /> <!-- 5 -->

  <!-- 6 -->
  <permission android:name="com.marakana.yamba.RECEIVE_TIMELINE_NOTIFICATIONS"
    android:label="@string/receive_timeline_notifications_permission_label"
    android:description="@string/receive_timeline_notifications_permission_description"
    android:permissionGroup="android.permission-group.PERSONAL_INFO"
    android:protectionLevel="normal" />

  <!-- 7 -->
  <uses-permission android:name="com.marakana.yamba.SEND_TIMELINE_NOTIFICATIONS" />
  <uses-permission android:name="com.marakana.yamba.RECEIVE_TIMELINE_NOTIFICATIONS" />

</manifest>
{/CODE}



% + This is the name of our permission, the handle we are going to use later to refer to it both when we request it and when we enforce it. In our app, we’ll be using the permission to securely send timeline notifications.
+ 权限的名称，在后面使用这个名词来引用相应的权限。
% + Label that will be displayed to the user when she is prompted to grant this permission to our app at the installation time. It should be relatively short. Note that we have defined this label in our strings.xml resource file.
+ 当需要用户授权时显示的标签。这个标签应该比较短。我们在string.xml里定义了相应的资源。
% + A description should be provided to offer information about why this permission is needed and how it’s going to be used.
+ 描述权限的内容和使用目的。
% + The permission group is optional, but helps the system to group your permission with other common permissions in one of the system-defined permission groups. You could also define your own group, but that is rarely done.
+ 权限组是可选的，但是能够帮助系统吧它和其他权限分组。 你也可以自己定义新的分组，不过很少需要这么做。
% + The permission level is a required value specifying the severity or risk posed by granting the permission. A level of ‘normal’ is the lowest and most basic of the four standard permission levels.
+ 权限的保护等级定义了授权后可能面临的分析程度。 normal 是标准的四个等级中最低的等级
% + We do the same to define the other permission, which allows us to receive the timeline notifications we are generating.
+ 其他的权限定义和上面的类似，这个权限运行接收 Yamba 生成的时间线广播。
% + Once we have our permissions defined, we need to ask the user to grant them to the application. We do that via the <uses-permission> element, just as we did it for the other system permissions we specified earlier.
+ 我们定义过这些权限后，需要为程序申请这些权限。和系统权限一样使用  <uses-permission> 来定义。


% At this point, we have defined our two custom permissions and have requested them for our application. Next, we need to make sure the sender and receiver both play by the rules.
现在已经定义好了两个自定义权限并且为自己申请了授权。接下来需要保证广播的接受和发送都能符合相应的权限。

% === Updating the Services to Enforce Permissions ===
=== 为服务应用自定义权限 ===

% It is our Updater service that broadcasts the intent to the rest of the system once there’s a new status update. Now, since we do not want everyone to receive this intent, we want to ensure that the receiver won’t be allowed to receive it unless the receiver defines the right permission.
当新数据到达时，UpdaterService 负责向系统中广播 intent 。现在我们不想让别人接收这个广播，所以需要确保接收者拥有正确的权限。


**Example 11.12. Updater in UpdaterService**
{CODE}
  ...
  private class Updater extends Thread {
    static final String RECEIVE_TIMELINE_NOTIFICATIONS =
        "com.marakana.yamba.RECEIVE_TIMELINE_NOTIFICATIONS"; //1
    Intent intent;

    public Updater() {
      super("UpdaterService-Updater");
    }

    @Override
    public void run() {
      UpdaterService updaterService = UpdaterService.this;
      while (updaterService.runFlag) {
        Log.d(TAG, "Running background thread");
        try {
          YambaApplication yamba = (YambaApplication) updaterService
              .getApplication();
          int newUpdates = yamba.fetchStatusUpdates();
          if (newUpdates > 0) {
            Log.d(TAG, "We have a new status");
            intent = new Intent(NEW_STATUS_INTENT);
            intent.putExtra(NEW_STATUS_EXTRA_COUNT, newUpdates);
            updaterService.sendBroadcast(intent, RECEIVE_TIMELINE_NOTIFICATIONS); //2
          }
          Thread.sleep(DELAY);
        } catch (InterruptedException e) {
          updaterService.runFlag = false;
        }
      }
    }
  } // Updater
  ...
{/CODE}



% + This is the name of the permission that we are requiring the receiver to have. It needs to be the same as the permission name in the manifest file that we specified previously.
+ 我们要求接收者拥有的权限的名称。这个名称和 manifest 中定义的需要一样。
% + To enforce the permission on the receiver, we simply add it to the sendBroadcast() call as the optional second parameter. If the receiver doesn’t have this particular permission granted to it by the user, the receiver won’t be notified and will never know that our message just got dropped.
+ 要保证接收者拥有特定的权限，只需要在 sendBroadcast() 调用中添加第二个可选的参数即可。如果接收器没有相应的权限，那么将不会接受到该广播。


% To complete the security in the sending direction, we don’t have to do anything to TimelineReceiver. It will be able to receive the permission because the user granted it. But there is a corresponding responsibility on the TimelineReceiver side. It should check that the sender had permission to send the message it is receiving.
要保证发送端的安全，我们不需要对 TimelineReceiver 做任何改动。因为用户已经赋予相应的权限，所以能够正确的获取通知。 但是对于接收端，同样应该确保发送者是我们认可的。


% === Update Timeline Receiver to Enforce Permissions ===
=== 为接收端应用权限 ===

% Now we will check on the receiver side that the broadcaster is allowed to talk to us. To do this, we add the broadcast permission that the sender should have to our receiver when we register it.
现在我们需要在接收端检查消息是否是我们许可的代码发送的。要实现此功能，需要在注册接收器时添加权限。


**Example 11.13. TimelineReceiver in TimelineActivity.java**
{CODE}
...
public class TimelineActivity extends BaseActivity {
  static final String SEND_TIMELINE_NOTIFICATIONS =
      "com.marakana.yamba.SEND_TIMELINE_NOTIFICATIONS"; //1
  ...
  @Override
  protected void onResume() {
    super.onResume();
    ...
    // Register the receiver
    super.registerReceiver(receiver, filter,
        SEND_TIMELINE_NOTIFICATIONS, null); //2
  }
  ...
}
{/CODE}


% + We define the permission name as a constant. This needs to be the same name as we declared for this permission in the manifest file.
+ 我们将权限名称定义为一个常量。值和manifest文件中定义的一样。
% + In the onResume() method where we register our TimelineReceiver, we now add a parameter specifying this permission as a requirement placed on anyone who wants to send us this type of broadcast.
+ 在 onResume() 中注册 TimelineReceiver 时，定义发送者应该具有的权限。


% We now have a pair of custom permissions and we are enforcing them in both the sender and the receiver of the broadcast. This illustrates some of the capabilities of Android to fine-tune the permission system.
现在我们在两端都添加了权限限制。这个过程也是对 Android 的权限系统的一个粗略介绍。

% == Summary ==
== 小结 ==

% Yamba is now complete and ready for prime time. Our application can now send status updates to our online service, get the latest statuses from our friends, get started automatically on boot time, and be refreshed live when a new status is received.
到目前为止， Yamba 已经接近于完成了。我们已经可以将消息发送到服务器，也能够从服务器上获取朋友们的消息，并且在系统启动时自动启动，还能在有新消息到达时自动刷新显示。

% __Figure 11.1, “Yamba Completion”__ illustrates what we have done so far as part of the design outlined in __Figure 5.4, “Yamba Design Diagram”__.
__Figure 11.1, "Yamba Completion"__ 展示了我们目前已完成的部分。完整图参见 __Figure 5.4, Yamba Design Diagram__

	**Figure 11.1. Yamba Completion**
		[images/11-YambaCompletion.png]


