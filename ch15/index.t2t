


= Native Development Kit (NDK) =

{ORGI}The Native Development Kit, or NDK, is an add-on to SDK that helps you integrate native code—code that uses platform-specific features, generally exposed through C or C++ language APIs—within your Android application. The NDK allows your Android application call some native code and even include some native libraries.
{TRAN}Native Development Kit，简称 NDK ，是用来集成平台相关的本地代码的工具集。这些库通常使用 C 或者 C++ 编写。 NDK 使你的程序能调用本地代码和原生库。

{ORGI}In Gingerbread release of Android, NDK takes support for native code even further with the introduction of NativeActivity class. You can now write your entire activity in C or C++. However, NativeActivity is not subject of this chapter. Here, we’ll look at integrating C native code within your Java Android application.
{TRAN}在“姜饼”（即 Android 2.3 --译者注）中，NDK甚至允许通过 NativeActivity 来实现完全使用 C 或者 C++ 编写的应用。不过如何使用 NativeActivity 并不是本章的主题。 本章中我们主要介绍如何在你的 Java 应用中嵌入 C 代码。

{ORGI}== What Is and Isn’t NDK For? ==
{TRAN}== NDK 是干嘛的？ ==

{ORGI}The main motivation for developing parts of your app in native code is performance. As you can see, the NDK supports math and graphics libraries well, as well as some supporting system libraries. So graphically and computationally intensive application are the best candidates for NDK. One could argue that the recent boom in the popularity of mobile games is driving this development as well.
{TRAN}使用本地代码的最主要目的是提升性能。 正如你所见， NDK 支持诸多数学和图像相关的库，还有某些系统库。 所以图像处理和密集运算型程序能从 NDK 中受益颇丰。 另外最近成爆炸性增长的游戏应用也催生了 NDK 的发展。

{ORGI}Note that any native code accessible from your app via JNI still runs inside your application’s Dalvik VM. So it’s subject to the same security sand-boxing rules that Android application lives by. Writing parts of your application in C or C++ just so you can do something that may not be possible to do in Java is usually not a good reason for NDK. Keep in mind that most of the low level hardware features are already elegantly exposed via the Android framework in Java and are usually what you want to use anyhow.
{TRAN}不过注意的是，所有使用 JNI 调用的代码仍然在应用的 Dalvik VM 进程空间中运行。所以他们都共享了同样的安全沙盒环境。所以试图使用 NDK 来做一些在 Java 中无法完成的任务并不是 NDK 的设计初衷。而且绝大部分的硬件功能都已经被 Android 框架很好的抽象成了 Java 接口。

{ORGI}== Problems Solved by the NDK ==
{TRAN}== NDK 的功能 ==

{ORGI}The NDK addresses several of the major issues you’d have to deal with if you were doing native development directly.
{TRAN}如果你使用 NDK 的话，它将能够帮你处理好开发本地代码时可能遇到的诸多琐事。

{ORGI}=== Tool Chain ===
{TRAN}=== 工具链 ===

{ORGI}Java offers access to native code via the Java Native Interface (JNI). To make it work, you would typically have to compile everything on your host computer for the target architecture, requiring you to have the entire tool chain on your development machine. Setting up the proper cross-compiler and other tools is not easy.
{TRAN}Java 通过 JNI (Java Native Interface) 访问本地代码。 为了使程序正常工作，你需要吧代码编译成目标架构上可以运行的指令，这要求你拥有适合的编译器。但是准备合适的交叉编译环境绝非易事。

{ORGI}NDK provides the complete toolchain you need to compile and build your native code so it can run on your target platform. The build system makes it really easy to set up your environment and integrate your native code into your project.
{TRAN}NDK 提供了交叉编译代码所需要的完整的工具链。构建系统让你能够轻松的将本地代码集成到应用中去。

{ORGI}=== Packaging Your Libs ===
{TRAN}=== 打包库文件 ===

{ORGI}If you had a native library and you wanted it available to your application to load, you’d have to make sure it is part of the library path where the system searches for libraries to load. This is typically ``LD_LIBRARY_PATH`` on Linux. On an Android device, only the ///system/lib// directory is part of this path. This is a problem because the entire ///system// partition is read-only and thus unavailable to an app developer to install libraries there.
{TRAN}如果你的应用想要加载某个本地库，需要保证该库能够被系统找到才行。通常在 Linux 下，需要放在 ``LD_LIBRARY_PATH`` 中定义的路径中。而在 Android 中，这个变量只定义了 ///system/lib// 。由于平时整个 ///system// 分区都是只读的，所以几乎是没法手动安装的。

{ORGI}NDK solves this problem by providing for a mechanism to ship your native library as part of your Application Package (APK) file. Basically, when the user installs an APK that contains a native library, the system creates a directory named ///data/data/your.package/lib///. If you recall from the section called __“File System, Explained”__, this partition is private just to your application and thus a safe place to keep your libraries for the user, while not letting other applications load and use your libraries. This packaging mechanism is a dramatic change to the rules for distributing applications on Android devices, and is a big deal because it brings the huge range of legacy and new native code into the game.
{TRAN}NDK 通过将本地库放在 APK 中一同发行来解决此类问题。 基本上当用户安装含有本地库的 APK 时，系统会创建一个名为 ///data/data/your.package/lib/// 的目录。 在第七章的 __文集系统__ 一节中我们曾经讲过该分区是属于应用程序的。所以你可以吧库写在这里而不用担心其他程序可能错误的加载和使用你的库。这个机制很好的改善了 Android 应用的发行过程，它使得不同应用中不同版本的本地库可以和平共处。

{ORGI}=== Documentation and Standardized Headers ===
{TRAN}=== 文档与标准化头文件 ===

{ORGI}The NDK comes with helpful documentation and sample application explaining how to get things done in native code. It also standardizes on certain guaranteed C and C++ headers, such as:
{TRAN}NDK 附带的若干实例程序来演示如何使用本地代码。另外还附带了标准的 C 和 C++ 头文件，例如：

{ORGI}	 - libc (C library) headers
{TRAN}	 - libc (C 运行时库) 头文件
{ORGI}	 - libm (math library) headers
{TRAN}	 - libm (数学运算库) 头文件
{ORGI}	 - JNI interface headers
{TRAN}	 - JNI 接口定义
{ORGI}	 - libz (Zlib compression) headers
{TRAN}	 - libz (zlib 压缩库) 头文件
{ORGI}	 - liblog (Android logging) header
{TRAN}	 - liblog (Android 日志系统) 头文件
{ORGI}	 - OpenGL ES 1.1 and OpenGL ES 2.0 (3D graphics libraries) headers
{TRAN}	 - OpenGL ES 1.1 和 OpenGL ES 2.0 (3D 图像渲染) 头文件
{ORGI}	 - libjnigraphics (Pixel buffer access) header (for Android 2.2 and above).
{TRAN}	 - libjnigraphics (访问像素缓存) 头文件 (仅在 Android 2.2 及以上中存在)
{ORGI}	 - A minimal set of headers for C++ support
{TRAN}	 - 最小化的 C++ 支持
{ORGI}	 - OpenSL ES native audio libraries
{TRAN}	 - OpenSL ES 本地音频支持
{ORGI}	 - Android native application APIS
{TRAN}	 - Android 本地程序 API


{ORGI}Given this set of standard headers, you may have extrapolated what NDK is well suited for. We’ll examine that in the next section.
{TRAN}通过 NDK 提供的这些头文件，我们大概能够了解 NDK 的适用范围。在下一节中我们会详细解释它们。


{ORGI}== NDK Example - Fibonacci ==
{TRAN}== NDK 实例 - Fibnoacci ==

{ORGI}Because the NDK is well-suited for computationally intensive applications, I wanted to find an example where we can implement a relatively simple algorithm in both native code and Java to compare their relative speed.
{TRAN}由于 NDK 非常适合运算性的程序使用，我们需要一个能够在 Java 和 C 中都能简单实现的算法，然后比较他们的运行速度。

{ORGI}So I picked a Fibonacci algorithm as the example. It’s a fairly simple algorithm that can be easily implemented in both C and Java. We can also implement it recursively as well as iteratively.
{TRAN}于是我选择了 Fibonacci 算法作为例子。这是一个相当简单的算法，使用 C 或者 Java 实现都不困难。 我们可以通过递归和迭代两种方式实现它。

{ORGI}As a quick refresher, the Fibonacci series is defined as:
{TRAN}简单的将， Fibonacci 序列的定义如下：

{CODE}
fib(0)=0
fib(1)=1
fib(n)=fib(n-1)+fib(n-2)
{/CODE}


{ORGI}So the Fibonacci sequence looks like this: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, and so on.
{TRAN}Fibonacci 序列看起来像这样： 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...

{ORGI}In this example, we are going to:
{TRAN}在本例中，我们将要：

{ORGI}	 - Create the Java class representing the Fibonacci library.
{TRAN}	 - 新建一个 Java 类来表示 Fibonacci 库。
{ORGI}	 - Create the native code header file.
{TRAN}	 - 生成本地代码的头文件。
{ORGI}	 - Implement the native code by writing C code.
{TRAN}	 - 使用 C 来实现算法。
{ORGI}	 - Compile everything and build a shared library.
{TRAN}	 - 编译并创建共享库。
{ORGI}	 - Use this native code inside Android activity.
{TRAN}	 - 在 Android 应用中调用这个库。


=== FibLib ===

{ORGI}FibLib is where we declare our algorithms for computing the Fibonacci sequence. We have a total of four versions of the Fibonacci algorithm:
{TRAN}FibLib 里定义了 Fibonacci 算法，一共有4中算法：

{ORGI}	 + Java recursive version
{TRAN}	 + Java 递归版本
{ORGI}	 + Java iterative version
{TRAN}	 + Java 迭代版本
{ORGI}	 + Native recursive version
{TRAN}	 + C 递归版本
{ORGI}	 + Native iterative version
{TRAN}	 + C 迭代版本


{ORGI}We’ll write the Java implementation here and do the native ones in C later.
{TRAN}在这里首先完成 Java 的版本，等下再实现 C 版本。

	**Example 15.1. FibLib.java**

{CODE}
package com.marakana;

public class FibLib {

        // Java implementation - recursive
        public static long fibJ(long n) {  //#{1}
                if (n <= 0)
                        return 0;
                if (n == 1)
                        return 1;
                return fibJ(n - 1) + fibJ(n - 2);
        }

        // Java implementation - iterative
        public static long fibJI(long n) { //#{2}
          long previous = -1;
          long result = 1;
                for (long i = 0; i <= n; i++) {
                  long sum = result + previous;
                        previous = result;
                        result = sum;
                }
                return result;
        }

        // Native implementation
        static {
                System.loadLibrary("fib"); //#{3}
        }

        // Native implementation - recursive
        public static native long fibN(int n); //#{4}

        // Native implementation - iterative
        public static native long fibNI(int n);  //#{5}
}
{/CODE}

{ORGI} + This is the Java recursive version of the Fibonacci recursive algorithm.
{TRAN} + Java 递归版本的 Fibonacci 算法
{ORGI} + The iterative version of the same Java recursive algorithm. Everything that can be implemented recursively can be reduced to an iterative algorithm as well.
{TRAN} + Java 迭代版本的 Fibonacci 算法，与迭代相比省去了递归的步骤。
{ORGI} + The native version will be implemented in a shared library. Here, we tell the Java virtual machine to load that library so that the function can be found when called.
{TRAN} + 原生版本在共享库中实现，这里只是告诉 JVM 在需要是加载这个库。
{ORGI} + We declare the native Fibonacci method, but don’t implement it. Notice the use of the ``native`` keyword here. It tells the Java VM that the implementation of this method is in a shared library. The library should be loaded prior to this method call.
{TRAN} + 定义了对应的函数，但是并不实现他们。注意这里使用了 ``native`` 关键字。它告诉 JVM 该函数的代码在共享库中实现。在调用这个函数前应该加载对应的库。
{ORGI} + The previous declaration is for the recursive native implementation. This one is for the iterative version.
{TRAN} + 这是迭代的版本。


{ORGI}At this point, our FibLib is complete, but we still need to back the ``native`` methods with their C implementations. To do that, first we need to create the appropriate JNI header file.
{TRAN}现在我们完成了 FibLib ，但是仍然需要用 C 实现对应的 ``native`` 函数。首先需要生成 JNI 头文件。


{ORGI}=== JNI Header File ===
{TRAN}=== JNI 头文件 ===

{ORGI}The next step is to create the C header file based on our FibLib Java file. To do that, we use Java’s standard javah tool. Note that you must have the Java Development Kit (JDK) installed in order to find this tool in the //JDK/bin// directory.
{TRAN}下一步是根据 FibLib 的 Java 代码生成 C 的头文件。 要完成这项工作，需要使用叫做 javah 的工具。 这个工具在 JDK 中附带，你可以在 //JDK/bin// 中找到它。

{ORGI}Now, to create the C header, go to your project’s bin directory and execute:
{TRAN}现在来生成 C 头文件，在项目的 bin 目录下执行：

{CODE}
[Fibonacci/bin]> javah -jni com.marakana.FibLib
{/CODE}


{ORGI}``javah -jni`` takes a Java class as the parameter. Since not all the classes are in the Java classpath by default, it is easiest to just change directory to your project’s bin directory. Here, we assume that the current working directory is part of your Java classpath and thus that ``javah -jni com.marakana.FibLib`` at this location will work.
{TRAN}``javah -jni`` 读取参数中制定的Java类。由于并不是所有类都在 Java 默认的类路径下，所以在项目的 bin 目录下执行这个命令会使过程相对简单些。现在假设当前目录在 Java 的类路径中，所以 ``javah -jni com.marakana.FibLib`` 能够正确加载对应的类。

{ORGI}The result should be a new file named //com_marakana_FibLib.h//. This is the C header file that we need to implement next.
{TRAN}上述命令会生成一个叫 //com_marakana_FibLib.h// 的文件，它就是待会儿我们要实现的 C 头文件。

{ORGI}Before implementing our native files, let’s organize our project a little bit. Although Eclipse did a lot to setup our Android application directories in a meaningful way thus far, it doesn’t yet offer that level or support and automation for NDK development. We are going to do a couple of steps manually here.
{TRAN}在写本地代码前，我们先来整理一下项目。尽管 Eclipse 的确帮助我们完成了很多准备工作，但是它并没有提供有关 NDK 的支持。所以这些步骤需要手动完成。

{ORGI}For one, create a directory named jni inside your Eclipse Fibonacci project. This will be the place where you’ll store all your native code and related files. You can create this directory from within Eclipse by selecting the Fibonacci project in Package Explorer, right-clicking on it, and choosing New→Folder.
{TRAN}首先， 在项目目录下新建一个 jni 目录。这是存放所有本地代码和相关文件的地方。你可以通过在 eclipse 中选择 FibLib 项目，右键选择 新建->文件夹

{ORGI}Next, move this new header file into that folder:
{TRAN}现在吧生成好的头文件移动到这个文件夹里：

{CODE}
[Fibonacci/bin]> mv com_marakana_FibLib.h ../jni/
{/CODE}


{ORGI}You can look into this file:
{TRAN}来看一下刚刚生成的文件：


{CODE}
include::code/Fibonacci/jni/com_marakana_FibLib.h
{/CODE}


{ORGI}As you can see, this file is automatically generated and is not to be modified by the programmer directly. You may observe signatures for two of our native functions that we’re yet to implement:
{TRAN}在文件的开始就可以见到警告说这个文件是自动生成的，不要去手工修改它。在下面我肯可以找到等下需要实现的函数的签名：


{CODE}
...
JNIEXPORT jlong JNICALL Java_com_marakana_FibLib_fibN
  (JNIEnv *, jclass, jlong);
...
JNIEXPORT jlong JNICALL Java_com_marakana_FibLib_fibNI
  (JNIEnv *, jclass, jlong);
...
{/CODE}


{ORGI}These are standard JNI signatures. They are generated by a naming convention indicating that the function contains code defined in ``Java`` as part of ``com.marakana.FibLib`` class for native methods ``fibN`` and ``fibNI``. You can also see that both methods return ``jlong``, a JNI-standardized integer value.
{TRAN}这是 JNI 的标准签名。他们通过某种命名转换规则生成，这样 Java 才能把这些函数和匹配到 ``com.marakana.FibLib`` 的 ``native`` 方法 ``fibN`` 和 ``fibNI`` 上。另外返回类型 ``jlong`` 是 JNI 中整数数据类型。

{ORGI}Their input parameters are also interesting: ``JNIEnv``, ``jclass`` and ``jint``. The first two are always part of a Java class created to interface with native code: the ``JNIEnv`` points back to the virtual machine environment, and the next parameter points back to the class or object where this method is from; the parameter is ``jclass`` for a class method or ``jobject`` for an instance method. The third parameter, ``jlong`` is just our input into the Fibonacci algorithm, our ``n``.
{TRAN}参数的命名同样也有特殊的意义：``JNIEnv``, ``jclass`` and ``jint`` 。所有 JNI 函数都至少有前两个参数： ``JNIEnv`` 指向 Java 虚拟机的运行环境， 第二个参数则代表了该函数所在的对象或类。对于静态方法就是 ``jclass`` ，而实例方法是 ``jobject``。 接下来才是是 Java 函数中声明的参数，比如在这里定义 Fibonacci 中用到的 ``n``。


{ORGI}Now that we have this header file, it is time to provide its implementation in C.
{TRAN}一旦生成了头文件，我们就可以开始实现 C 函数了。


{ORGI}=== C Implementation ===
{TRAN}=== C 函数实现 ===


{ORGI}We are going to create a C file that will implement our native algorithms. For simplicity sake, we’ll call it fib.c. Like the header file we looked at earlier, this file will reside in the jni folder. To create it, right-click on jni folder and choose New→File. Save it as fib.c.
{TRAN}现在需要新建一个 C 文件来存放本地代码。为了简单起见我们吧这个文件叫做 fib.c 。 和刚才生成的头文件一样，这个文件也应该放在 jni 文件夹中。 右键点击 jni 文件夹，然后选择 New→File 取名 fib.c 然后保存。


{NOTE}
{ORGI}You’ll notice that when you open the C file, it may open up in another editor outside of Eclipse. That’s because Java version of Eclipse typically doesn’t have support for C development. You could extend your Eclipse with C development tools by going to Help→Install New Software inside of Eclipse. Alternatively, you can just open the file with standard Eclipse text editor by selecting it and choosing Open With→Text Editor.
{TRAN}有时候你打开 C 文件时，Eclipse 会调用外部编辑器而不是在编辑窗格打开。 这是因为通常用于 Java 开发的 Eclipse 环境不支持 C 开发。你可以通过  Help→Install New Software 为 Eclipse 安装 C 开发工具支持。或者可以使用右键菜单： Open With→Text Editor 强制在 eclipse 中打开。
{/NOTE}


{ORGI}Next, we provide the implementation of the Fibonacci algorithm in C in this fib.c file. The C versions of our algorithms are almost identical to the Java versions:
{TRAN}C 版本的 Fibonacci 算法和 Java 版本并没有很大差别。 下面就是 fib.c 中的代码。


 **Example 15.2. jni/fib.c**

{CODE}
#include "com_marakana_FibLib.h" /* #{1} */

/* Recursive Fibonacci Algorithm #{2} */
long fibN(long n) {
  if(n<=0) return 0;
  if(n==1) return 1;
  return fibN(n-1) + fibN(n-2);
}

/* Iterative Fibonacci Algorithm #{3} */
long fibNI(long n) {
  long previous = -1;
  long result = 1;
  long i=0;
  int sum=0;
  for (i = 0; i <= n; i++) {
    sum = result + previous;
    previous = result;
    result = sum;
  }
  return result;
}

/* Signature of the JNI method as generated in header file #{4} */
JNIEXPORT jlong JNICALL Java_com_marakana_FibLib_fibN
  (JNIEnv *env, jclass obj, jlong  n) {
  return fibN(n);
}
/* Signature of the JNI method as generated in header file #{5} */
JNIEXPORT jlong JNICALL Java_com_marakana_FibLib_fibNI
  (JNIEnv *env, jclass obj, jlong  n) {
  return fibNI(n);
}
{/CODE}


{ORGI} + We import com_marakana_FibLib.h, the header file that was produced when we called ``javah -jni com.marakana.FibLib``.
{TRAN} + 首先需要导入头文件 com_marakana_FibLib.h 。这个文件是通过 ``javah -jni com.marakana.FibLib`` 命令生成的。
{ORGI} + The actual recursive Fibonacci algorithm. This is fairly similar to the Java version.
{TRAN} + 通过递归实现 Fibonacci 算法，和 Java 中的版本很相似。
{ORGI} + An iterative version of Fibonacci. Again, very similar to the Java version.
{TRAN} + 迭代版本的 Fibonacci 算法。
{ORGI} + JNI provides this function to us. Copy-paste the prototype from //com_marakana_FibLib.h//, add variable names, and call the appropriate C function to produce the result.
{TRAN} + JNI 函数，从 //com_marakana_FibLib.h// 中复制函数头，然后加上变量名称就可以了。
{ORGI} + Same for the iterative signature of the method.
{TRAN} + 迭代版本的函数也是一样。


{ORGI}Now that we have implemented C versions of Fibonacci, we want to build the shared library. To that, we need an appropriate Makefile.
{TRAN}完成了 C 版本的 Fibonacci 后，就可以编译共享库了。此时需要使用 Makefile。


{ORGI}=== The Makefile ===
{TRAN}=== Makefile ===


{ORGI}To build the native library, the ``Android.mk`` Makefile must describe our pieces. The file looks like this:
{TRAN}为了编译本地库，比如在 ``Android.mk`` 中定义要编译的文件，就像这样：

 **Example 15.3. jni/Android.mk**

{CODE}
LOCAL_PATH := $(call my-dir)

include $(CLEAR_VARS)

LOCAL_MODULE    := fib
LOCAL_SRC_FILES := fib.c

include $(BUILD_SHARED_LIBRARY)
{/CODE}


{ORGI}It is a part of the standard Android make system. All we are adding here is our specific input (//fib.c//) and our specific output (the //fib// module). The name of the module we specify is important and will determine the name of the library based on operating system convention. For example, on ARM-based systems, the output will be ``libfib.so`` file.
{TRAN}它是 Android 构建系统的一部分。我们需要做的至少定义输入（//fib.c//）和输出（//fib//模块）。模块名字将会决定生成的库的文件名。例如在 arm 平台上输出文件名会是 ``libfib.so``。

{ORGI}Once we have this make file, we’re ready to initiate the build.
{TRAN}写好 Makefile 已经就可以开始编译了。

{ORGI}=== Building Shared Library ===
{TRAN}=== 构建共享库 ===

{ORGI}Assuming you have the NDK installed properly, you can now build the native shared library by running //ndk//``/ndk-build`` in your project directory. Here, ndk refers to the directory where your NDK is installed.
{TRAN}假设你已经安装好了 NDK 。现在可以通过在项目目录下运行 //ndk//``/ndk-build`` 来构建共享库。 //ndk// 是你的 NDK 安装目录。

{ORGI}At this point, you should have a subdirectory named lib containing your shared library. When you deploy the Fibonacci application in the next section, this library is packaged as part of the APK.
{TRAN}一旦完成构建，你可以在名为 lib 的子目录下找到刚刚生成的文件。当你部署 APK 时，这些文件将会自动打包进去。

{NOTE}
{ORGI}The shared library is by default compiled to run on the emulator, so it’s based on ARM architecture.
{TRAN}默认情况下，共享库是基于 ARM 平台构建的。这样就可以在模拟器上运行了。
{/NOTE}


{ORGI}Finally, we need an application to put this library to good use.
{TRAN}最后，需要一个应用程序来调用我们的库。

{ORGI}=== Fibonacci Activity ===
{TRAN}=== Fibonacci Activity ===

{ORGI}The Fibonacci Activity asks the user to input a number. Then it runs the four algorithms to compute Fibonacci value of that number. It also times the results and prints them to the screen. This activity basically uses the ``FibLib`` class that in turn uses //libfib.so// for its native part.
{TRAN}Fibonacci Activity 允许用户输入一个数字。然后分别运行四种算法来计算这个值的 Fibonacci 序列。另外会吧不同算法所耗的时间打印在屏幕上。这个 activity 调用 ``FibLib`` 和 //linfib.so// 完成计算。

 **Example 15.4. FibActivity.java**

{CODE}
package com.marakana;

import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

public class Fibonacci extends Activity implements OnClickListener {
        TextView textResult;
        Button buttonGo;
        EditText editInput;

        @Override
        public void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                setContentView(R.layout.main);

                // Find UI views
                editInput = (EditText) findViewById(R.id.editInput);
                textResult = (TextView) findViewById(R.id.textResult);
                buttonGo = (Button) findViewById(R.id.buttonGo);
                buttonGo.setOnClickListener(this);
        }

        public void onClick(View view) {

                int input = Integer.parseInt(editInput.getText().toString()); //#{1}

                long start, stop;
                long result;
                String out = "";

                // Dalvik - Recursive
                start = System.currentTimeMillis(); //#{2}
                result = FibLib.fibJ(input);  //#{3}
                stop = System.currentTimeMillis();  //#{4}
                out += String.format("Dalvik recur  sive: %d (%d msec)", result, stop
                                - start);

                // Dalvik - Iterative
                start = System.currentTimeMillis();
                result = FibLib.fibJI(input); //#{5}
                stop = System.currentTimeMillis();
                out += String.format("\nDalvik iterative: %d (%d msec)", result, stop
                                - start);

                // Native - Recursive
                start = System.currentTimeMillis();
                result = FibLib.fibN(input); //#{6}
                stop = System.currentTimeMillis();
                out += String.format("\nNative recursive: %d (%d msec)", result, stop
                                - start);

                // Native - Iterative
                start = System.currentTimeMillis();
                result = FibLib.fibNI(input); //#{7}
                stop = System.currentTimeMillis();
                out += String.format("\nNative iterative: %d (%d msec)", result, stop
                                - start);

                textResult.setText(out); //#{8}
        }
}
{/CODE}


{ORGI} + We convert the string we get from the user into a number.
{TRAN} + 转换字符串到数字。
{ORGI} + Before we start the calculation, we take the current timestamp.
{TRAN} + 在计算前，保存当前时间。
{ORGI} + We perform the actual Fibonacci calculation by invoking the appropriate static method in ``FibLib``. In this case, it’s the Java recursive implementation.
{TRAN} + 通过 ``FibLib`` 的函数计算 Fibonacci 数列，这里调用的是 Java 递归版本。
{ORGI} + We take another timestamp and subtract the previous one. The delta is the length of the computation, in milliseconds.
{TRAN} + 把当前时间减去刚才保存的时间，就可以得到计算所用的时间，单位毫秒。
{ORGI} + We do the same for the iterative Java implementation of Fibonacci.
{TRAN} + 继续使用 Java 迭代算法计算。
{ORGI} + Here we use the native recursive algorithm.
{TRAN} + 使用本地递归算法。
{ORGI} + And finally we use the native iterative algorithm.
{TRAN} + 最后是本地迭代算法。
{ORGI} + We format the output and print out the results on the screen.
{TRAN} + 格式化输出并且打印在屏幕上，



{ORGI}=== Testing It All Works ===
{TRAN}=== 测试 ===

{ORGI}At this point, we can fire up the Fibonacci application and run some tests on it. Keep in mind that larger values for //n// take quite a bit longer to process, especially using the recursive algorithms. One suggestion would be to keep //n// in the 25-30 range. Also keep in mind that we are doing all this processing on Activity’s main UI thread, and blocking that thread for a long period of time will lead to the Application Not Responding (ANR) error we talked about in __Figure 6.9, “Application Not Responding”__ . As an exercise, you may want to move the actual calculation into an AsyncTask as described in the section called  __“AsyncTask”__ to prevent blocking the main thread.
{TRAN}现在可以使用 Fibonacci 完成一些测试了。 不过记住如果 //n// 的值很大时，会耗费非常长的时间来完成运算，特别是使用递归算法时。所以我们建议保存 //n// 的值在 25-30 之间。 另外由于计算是在主线程完成的，这样会阻塞很长时间并且让应用停止响应。就像  __Figure 6.9, “Application Not Responding”__ 那样。 作为练习，你可以试着吧实际运算移到  __“AsyncTask”__ 中去，来防止阻塞主线程。

{ORGI}As you run some tests, you may notice that the native version of the algorithm runs about one [order of magnitude http://en.wikipedia.org/wiki/Order_of_magnitude] faster than the Java implementation (__Figure 15.1, “Fibonacci of 33”__).
{TRAN}经过一些试验以后，你会发现本地版本的算法几乎比 Java 版本快了一个数量级(__Figure 15.1, “Fibonacci of 33”__)。

	**Figure 15.1. Fibonacci of 33**
		[images/15-Fibonacci.png]


{ORGI}These results in themselves should provide enough motivation to consider moving some of your computationally intensive code into native code. NDK makes the job of integrating native code into your app much simpler.
{TRAN}这样的结果充分说明了使用本地代码进行计算性的逻辑的必要性。使用 NDK 能使这个过程变得相对简单。

{ORGI}== Summary ==
{TRAN}== 总结 ==

{ORGI}Starting with the Gingerbread version of Android, NDK also supports Native Activities, a way to create an entire activity in C and still have it adhere to Activity lifecycle rules as discussed in the section called __“Activity Lifecycle”__. This further makes game development in Android easier.
{TRAN}在 Android 2.3 姜饼后的版本中， NDK 支持使用本地代码编写 Activitiy。这样就可以完成使用 C 语言并且仍然能使应用符合 __“Activity Lifecycle”__ 中介绍的应用生命周期规则。因此可以简化 Android 游戏开发的过程。

