%
%
%
{ORGI}= The Stack =
{TRAN}= Android的架构 =

{ORGI}This is the 9,000-foot overview of the Android platform. Although you’re concerned primarily with writing Android applications, understanding layout of the system will help shape your understanding about what you can or cannot easily do with Android.
{TRAN}我们将从9000英尺的高空俯瞰Android平台。你可能仅仅是想学习Android应用的编写方法，但对Andorid的架构有所理解是绝对没有坏处的。

{ORGI}By the end of this chapter, you’ll understand how the whole system works, at least from the high level. 
{TRAN}在本章最后，你将在大体上对整个系统的工作方式有所理解。

{ORGI}== Stack Overview ==
{TRAN}== 概述 ==

{ORGI}Android operating system is like a cake consisting of various layers. Each layer has its own characteristics and purpose. The layers are not cleanly separated but often seep into each other.
{TRAN}Android 系统就像一个多层的蛋糕。每一层都有自己的特性和目的，不过这些层之间并没有一个明确的界限，而通常是相互渗透的。

{ORGI}When you read through this, keep in mind that I am only concerned with the big picture of the entire system and will get into the nitty-gritty details of particular parts of the system later on. Figure 2.1, “Android Stack” shows the parts of the Android stack.
{TRAN}在你阅读本章时，要注意本章仅仅是整个系统的概览，至于各部分的细节，我们将放在后面讨论。"图2.1 Android Stack" 展示了 Android 系统架构的各部分。

	Figure 2.1. Android Stack
		[images/02-AndroidStack.png]

{ORGI}== Linux ==
{TRAN}== Linux ==

{ORGI}Android is built on top of Linux. Linux is a great operating system and a poster child of open source. There are many good reasons for choosing Linux as the base of the Android stack. Some of the main ones are portability, security, and features.
{TRAN}Android 是基于 Linux 系统构建的。 Linux 是一个伟大的操作系统，也是一个经典的开源项目。选择 Linux 作为 Andoird 系统基础的原因有很多，最主要是因为它具有可移植性、安全性以及丰富的特性。

{ORGI}=== Portability ===
{TRAN}=== 可移植性 ===

{ORGI}Linux is a portable platform relatively easy to compile on various hardware architectures. What Linux brings to Android is a level of hardware abstractions. By basing Android on Linux, we don’t have to worry too much about underlying hardware features. Most of low level parts of Linux have been written in fairly portable C code, which allows for third-parties to port Android to variety of devices.
{TRAN}Linux可以轻松地移植到各种不同的硬件平台上。有了Linux做硬件抽象层，Android就不必为不同硬件的兼容性而劳心。Linux 的绝大多数底层代码都是用可移植的 C 代码编写，因此第三方开发者可以将 Android 移植到很多不同的设备上。

{ORGI}=== Security ===
{TRAN}=== 安全性 ===

{ORGI}Linux is a highly secure system, having been tried and tested through some very harsh environments over the decades. Android heavily relies on Linux for security. All Android applications run as separate linux processes with permissions set by the Linux system. As such, Android passes a lot of security concerns to the underlying Linux system.
{TRAN}Linux 已经在一些苛刻的环境下使用和测试了数十年，被证明是一个非常安全的系统。Android 依赖 Linux 实现其安全特性。 所有的 Android 应用都在独立的 Linux 进程中执行，可以直接应用Linux进程的权限机制。由此，Android得以将大部分安全措施交由底层的Linux实现。


{ORGI}=== Features ===
{TRAN}=== 丰富的特性 ===

{ORGI}Linux comes with a lot of very useful features. Android leverages many of them, such as support for memory management, power management, and networking.
{TRAN}Linux 系统本身就具有很多实用的特性。 Android 从中受益良多，例如内存管理、电源管理和网络部分。

{ORGI}== Native Libraries ==
{TRAN}== 本地库 ==

{ORGI}Native libraries are C/C++ libraries often taken from the open source community in order to provide necessary services to Android application layer. They include:
{TRAN}来自开源社区的 C/C++ 本地库为 Android 应用层提供了很多必需的服务。它们包括: 

{ORGI} - WebKit: a fast web rendering engine used by Safari, Chrome, and other browsers
{TRAN} - WebKit: 一个高速的Web渲染引擎，这个引擎已经被 Safari ， Chrome 和很多其他的浏览器所使用。
{ORGI} - SQLite: a full-featured SQL database
{TRAN} - SQLite: 一个全功能的 SQL 数据库
{ORGI} - Apache Harmony: an open source implementation of Java
{TRAN} - Apache Harmony: 开源的 Java 实现
{ORGI} - OpenGL: 3D graphics libraries
{TRAN} - OpenGL: 3D 图像渲染库
{ORGI} - OpenSSL: the secure socket layer
{TRAN} - OpenSSL: 安全套接字层
{ORGI} - and many others
{TRAN} - 等等


{ORGI}While many of these libraries are taken as-is, one notable exception is Bionic. Bionic is basically a rewritten version of Standard C Library. The reason for Bionic is two fold:
{TRAN}这些库中的大部分都是被原封不动地拿过来的，但是 Bionic 是一个例外。 Bionic 基本上是 C 标准库的重写版。 使用 Bionic 的原因有如下两条: 

{ORGI} - Technology: to make it purpose-built for tiny battery powered devices
{TRAN} - 技术方面: 专门为使用电池的设备进行优化
{ORGI} - License: to make it license-friendly to others who may want to adopt it and change it
{TRAN} - 许可证方面: 对希望对其修改或衍生的第三方软件是许可证友好的


{TIP}
{ORGI}GNU libc, the default C library for Linux, is licensed under GPL license which requires any changes that you release publicly to be pushed back to open source community. As such, it may not be the most business-friendly open source license in case when a company wants to keep their derivative work proprietary. Bionic, on the other hand, is licensed under Apache/MIT license which doesn’t require derivative works to be open sourced.
{TRAN}GNU libc 是 Linux 默认使用的C标准库，它使用的 GPL 协议要求对其所做的任何修改在公开发布时都必须开放源代码。 这样的许可证对于大多数试图保护他们私有代码的商业公司来说都是不友好的。而 Bionic 使用的 Apache/MIT 许可证并不要求公开这些修改。
{/TIP}


{ORGI}== Dalvik ==
{TRAN}== Dalvik ==

{ORGI}Dalvik is a purpose-built virtual machine designed specifically for Android. It is developed by Dan Bornstein and his team at Google.
{TRAN}Dalvik 是一个专门为了 Android 而设计的虚拟机。它由 Dan Bornstein 和他在 Google 的团队开发。

{ORGI}While the Java virtual machine (VM) was designed to be a one-size-fits-all solution, the Dalvik team felt they could do a better job by focusing strictly on mobile devices. They looked at which of the constraints specific to a mobile environment are least likely to change in the near future. One of these is battery life, and the other is processing power. Dalvik was built from ground up to address those constraints.
{TRAN}传统的Java虚拟机（JVM）是为了适应各种不同环境而设计的，强调泛用性。但Dalvik的开发团队认为专注于一个方面，可以得到更好的设计。因此他们研究了长期限制移动设备性能的制约因素，比如电池的续航能力和处理器的速度。而后针对这些因素对症下药，专门设计了Dalvik。

{ORGI}Another side effect of replacing the Java VM with Dalvik VM is the licensing. While the Java language, Java tools and Java libraries are free, the Java virtual machine is not. This was more of an issue back in 2005 when the work on Dalvik started. Nowadays, there are open source alternatives to Sun’s Java VM, namely OpenJDK and Apache Harmony projects.
{TRAN}使用Dalvik VM代替传统Java VM的另一个好处在于许可证。 Java语言、开发工具以及Java类库都是自由的，但Java虚拟机不是。在2005年时，这对Dalvik来讲是个大问题。不过现在，除了 Sun 的 JVM 外，也出现了其他的开源 VM，例如 [OpenJDK http://openjdk.java.net/] 和 [Apache Harmony http://harmony.apache.org/] 。

{ORGI}By developing a truly open-source and license-friendly virtual machine, Android yet again provides a full-featured platform that others are encouraged to adopt for variety of devices without having to worry about the license.
{TRAN}Android作为一个全功能的开发平台，一个真正开源且许可证友好的虚拟机不可或缺。它鼓励人们移植到不同平台，而不用担心许可证问题。

{ORGI}=== Android and Java ===
{TRAN}=== Android 与 Java ===

	Figure 2.2. Java versus Dalvik
		[images/02-DalvikJava.png]

{ORGI}In Java, you write your Java source file, you compile it into a Java byte code using Java compiler and you run this byte code on the Java Virtual Machine. In Android things are different. You still write the Java source file and you still compile it to Java byte code using the same Java compiler. But at that point, you recompile it once again using Dalvik compiler to Dalvik byte code. It is Dalvik byte code that is then executed on Dalvik virtual machine.
{TRAN}在平常的Java开发中，都是编写Java代码，然后通过Java编译器编译成字节码，最后在JVM上运行。但在Android中并非如此。相同的是仍需编写Java代码然后编译为字节码，但Dalvik编译器在执行前，会将Java字节码重新编译为Dalvik字节码。到最后真正执行的是Dalvik字节码。

{NOTE}
{ORGI}It may sound like you have to do a lot more work with Android when it comes to Java. However, all these compilation steps are automated by tools such as Eclipse or ant and you never notice the additional steps.
{TRAN}提及Java，身为程序员像是有很多工作需要做。但实际上许多的复杂步骤都可以由Eclipse或者ant这样的工具自动完成，而你几乎不会感觉到这些步骤存在。
{/NOTE}

{ORGI}You may wonder why not compile straight from Java into the Dalvik byte code. There are couple of good reasons for that. Back in 2005 when work on Dalvik started, the Java language was going through frequent changes. But the Java byte code was more or less set in stone. So, the Android team chose to base Dalvik on Java byte code instead of Java source code.
{TRAN}你也许想知道，为什么不直接把Java代码编译成Dalvik字节码呢? 这是有考虑的。让我们回到2005年 Dalvik 项目刚刚开始时，当时 Java 的语法修改很频繁， 但 Java 字节码基本上没有什么太大的改动。于是 Android 团队决定使用 JVM 字节码而不是 Java 源码来产生 Dalvik 代码。

{ORGI}A side effect of this is that in theory you could write Android applications in any other language that compiles down to Java byte code. For example, you could use Python or Ruby. I say in theory because in practice you’d still need appropriate libraries that are part of the SDK to be available. But it is likely that the open source community will come up with solution to that in the future.
{TRAN}这样做得到的福利是， 理论上你可以使用任何可以编译成 Java 字节码的语言来开发 Android 应用，比如 Python 或者 Ruby 。 我说“理论上”是因为你还需要可用的 SDK 和库。不过有万能的开源社区在，未来会出现一套完善的解决方案也未可知。

{ORGI}Another thing to keep in mind is that Android Java is a non-standard collection of Java classes. Java typically ships in:
{TRAN}另外需要注意的是 Android Java 并非来自标准的 Java 家族。 Java 一般分为: 

{ORGI} - Java Standard Edition: used for development on basic desktop-type applications.
{TRAN} - Java 标准版: 用于开发基本的桌面型应用。
{ORGI} - Java Enterprise Edition (aka J2EE or JavaEE): used for development of enterprise applications.
{TRAN} - Java 企业版（也叫 J2EE 或者 JavaEE ）: 用于开发企业级应用。
{ORGI} - Java Micro Edition (aka J2ME or JavaME): Java for mobile applications.
{TRAN} - Java 微型版（也叫 J2ME 或者 JavaME ）: 用于移动平台的 Java 。


{ORGI}Android’s Java set of libraries is closest to Java Standard Edition. The major difference is that Java libraries for user interface (AWT and Swing) have been taken out and replaced with Android-specific user interface libraries. Android also adds quite a few new features to standard Java while supporting most of Java’s standard features. So, you have most of your favorite Java libraries at your disposal, plus many new ones.
{TRAN}Android的Java类库比较接近 Java 标准版，它们的主要区别在于Java类库的GUI接口（ AWT 和 Swing ）被替换成了 Android 的专用接口。 Android在支持标准 Java 的类库之余，也提供了若干新功能。这一来你可以很快地上手Android开发。

{ORGI}== App Framework ==
{TRAN}== 应用程序框架 ==

{ORGI}The application framework is a rich environment that provides numerous services to you, the app developer, to get your job done. This is the part of the platform that is best documented and extensively covered. That is because it is this layer that enables the mass-market of developers to get creative and be empowered to create fantastic applications.
{TRAN}应用程序框架是Android程序的执行环境，也是开发者的强大工具箱。另外，它也拥有Android平台中最全面最完善的文档。良好的文档可以激发广大开发人员的创意，也可以为他们构建优秀的应用程序提供有力的支持。

{ORGI}In application framework layer, you will find numerous Java libraries specifically built for Android. You will also find many services (or managers) that provide the ecosystem of capabilities your application can tap into, such as location, sensors, WiFi, telephony and so on.
{TRAN}在应用程序框架中，你可以发现很多为Android设计的Java库。除此之外，也有系统环境的支持，比位置、传感器、WiFi、电话等等。

{ORGI}As you explore the Android application development, most of your focus will be on this part of the stack. You will get to use many of the application framework components yourself.
{TRAN}在我们学习和实践Android开发中的大多时间都是与它打交道。要编写自己的应用，离不开框架中的诸多组件。

{ORGI}== Applications ==
{TRAN}== 应用程序 ==

{ORGI}And finally there are applications that you and other developers create. Applications are what end users find valuable about Android. They can come pre-installed on the device or could be downloaded from one of many Android markets.
{TRAN}架构的最上层是就你和其他开发者创建的各种应用。 应用即 Andorid 呈现给用户的发光之处， 它可以预先安装在系统中，也可以从诸多的软件商店中下载。

{ORGI}=== The APK ===
{TRAN}=== APK 文件 ===

{ORGI}An application is a single APK (application package) file. An APK file roughly has three main components. It consists of all your Dalvik executable code (Java code compiled automatically to Dalvik executable) plus all your resources (everything that is not code, such as images, layouts, etc.). Additionally, it may contain some native code as well.
{TRAN}每个应用都是一个 APK 文件（表示 Application PacKage ）。一个 APK 文件基本上由三个部分组成。它包括了所有的 Dalvik 代码（ Java 源文件可以自动编译成 Dalvik 代码）和所有的资源（也就是除了代码以外的部分，例如图像文件和布局文件）。另外它可能还会包含一些本地库。

{ORGI}  - Dalvik executable: this is all your Java source code compiled down to Dalvik executable. This is the code that runs your application.
{TRAN}  - Dalvik 代码: 由你的 Java 文件编译而来的 Dalvik 字节码。这是完成你程序功能的主要部分。
{ORGI}  - Resources: resources are everything that is not code. Your application may contain number of images, audio/video clips, as well as numerous XML files describing layouts, language packs, and so on. Collectively, these items are resources.
{TRAN}  - 资源: 资源就是除了代码外剩下的部分。你的应用中可能包含若干图片，音频/视频，还有很多的 XML 文件描述用来表述UI布局、语言包等等。总之，这些都是资源。
{ORGI}  - Native libraries: optionally, your application may include some native code, such as C/C++ libraries. These libraries could be packaged together with your APK file.
{TRAN}  - 本地库: 你的应用中可能会包含一些本地代码，比如 C/C++ 库。 这些库将一并打包在 APK 文件中。


{ORGI}=== Application Signing ===
{TRAN}=== 应用程序签名 ===

{ORGI}Android applications must be signed before they can be installed on a device. For development purposes, we’ll be signing applications with a debug key - a key that you already have on your development platform. However, when you want to distribute your application commercially, you’ll want to sign it with your own key. The details how to do that are at [Signing Your Application http://developer.android.com/guide/publishing/app-signing.html] page. We’ll also discuss it in Going Live chapter.
{TRAN}Android 程序在安装前必须进行签名。在开发时，我们可以使用开发者密钥(debug key)作为临时签名——这个密钥已经包含在开发环境中。 但作为商品发布时，你就必须使用自己的密钥进行签名。关于签名的具体步骤可以在 Android 网站的 [Signing Your Application http://developer.android.com/guide/publishing/app-signing.html] 页面找到。在后面我们将具体地讨论这个话题。

%NOTE: Going Live意思似乎是“待发布”的意思，猜该是一个遗忘的占位符号。在书写本章时，作者的连载才刚刚开始。

{ORGI}=== App Distribution ===
{TRAN}=== 应用的发布 ===

{ORGI}One place Android is quite different than other platforms is the distribution of the apps. On most other platforms, such as iPhone, a single vendor has the monopoly over the distribution of applications. On Android, there can be many different Android stores or markets. Each one can have its own set of policies with respect to what is allowed, how the revenue is split, and so on. As such, Android is much more of a free market space with vendors competing for business.
{TRAN}Android 与其他平台的一个显著区别就是应用的发布机制。在多数的平台上(比如iPhone)，应用的发布都由一个单独的提供商独揽。 而在 Android 中，可以存在很多不同的 Android 商店。 每家商店都可以制定自己的发布条款和分成方式。这一来，Android得以成为一个提供商之间相互竞争的自由市场。

{ORGI}In practice, the biggest market currently is Android Market run by Google. It is unclear if Google’s motivation is to just seed the market space while other stores develop, or they will strive to make it a profitable venture for them.
{TRAN}不过，目前最大的应用市场“Android Market”是Google自己运营的。目前还不清楚Google只是希望促进和催生其他商店发展，还是希望认真经营使之成为利润来源。

{ORGI}Applications can also be distributed via the web. When you download an APK file from a website by using the Browser, the application represented by the APK file automatically gets installed on your phone.
{TRAN}应用也可以通过 Web 发布。使用浏览器下载一个 APK 文件， APK 文件即可自动安装到你的手机上。

{ORGI}=== What about viruses, malware, spyware and other bad things? ===
{TRAN}=== 关于病毒、恶意程序和其他坏东西的一点讨论 ===

{ORGI}With its decentralized application distribution system, it is certainly possible for an unsuspecting user to download a malicious app and have it do bad things. There have been reports of phishing attacks via fake banking apps.
{TRAN}这是一个去中心化的发布系统，自然就免不了有人利用用户的信任传播恶意软件来做坏事。目前已接到通过伪造的金融应用进行钓鱼攻击(phishing attacks)的报告。

{ORGI}So, Android leaves it to the market place to sort it out. Eventually, if you believe in free market, there will be stores that are more reputable and those that are less so. For example, Google polices its Android Market by removing malicious apps, such as the fake banking apps. Google relies on users to report malicious apps. Other stores may choose to do more proactive testing and raise the bar on what gets into the store in the first place.
{TRAN}Android把这个问题交给市场去解决。如果你了解自由市场，就知道商店的信誉是良莠不齐的。 Google会根据用户的举报，通过人工移除Android Market 中的恶意软件(比如钓鱼软件)来保证用户的安全。其它商店也可以做出更多主动检测，并给出一个明显的提示。

{ORGI}== Summary ==
{TRAN}== 总结 ==

{ORGI}In this chapter, you got a big picture overview of what Android operating system comprises of and how various pieces fit together. You now understand what makes Android so complete, open and attractive to developers.
{TRAN}在本章中，我们介绍了 Android 操作系统的组成部分，及其结合方式。现在，你该对Android的完善、开放已有所体会，而这正是吸引开发者的魅力所在。

{ORGI}In the next chapter, we’ll look at how to setup your development environment so you can quickly get up to speed. We’ll also look at a simple Hello World application and dissect it so that you get the understanding of various pieces of an application.
{TRAN}在下一章，我们将搭建一个高效的开发环境。同时尝试编写一个简单的 Hello World 应用，然后剖析它，体会应用开发的不同方面。

