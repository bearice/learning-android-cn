%
%
%
= Content Providers =

% Take your contacts, for example. You may have a large database of contacts on your device. You can view them via the Contacts app as well as via the Dialer app. On some devices, such as HTC Android models, there may be even multiple versions of Contacts and Dialer apps available. It would not make a lot of sense to have similar data live in multiple databases.

比方说，你的设备里可能已经有了一个庞大的联系人数据库。Contacts程序可以查看它们，Dialer程序也可以，有些设备(比如HTC)还带着不同版本的Contacts与Dialer。既然都需要用到联系人数据，如果它们各自使用独立数据库的话，事情就会比较麻烦。

% Content Providers provide a way to centralize content in one place and have many different applications access it as needed. In case of the Contacts on your phone, there is actually a ContactProvider application that contains a Content Provider. Other applications access the data via this interface. The interface itself is fairly simple: it is the same insert(), update(), delete(), and query() methods we saw in Chapter 9, Database.

Content Provider提供了一个统一的存储接口，允许多个程序访问同一个数据源。在联系人的这个例子里，还有个应用程序在背后扮演着数据源的角色，提供一个ContentProvider作为接口，供其它程序读写数据。接口本身很简单：insert()、update()、delete()与query()，与第九章提到数据库的接口一致。

% Android uses Content Providers quite a bit internally. We already mentioned contacts. Settings is another example, and so are all your bookmarks. All the media in the system is also registered with MediaStore, a content provider that dispenses images, music, and videos in your device.

Android在内部没少使用Content Provider。除了前面提到的联系人，系统设置、书签也都是Content Provider。另外系统中所有的多媒体文件也都注册到了一个Content Provider里，那就是MediaStore，通过它可以检索系统中所有的图片、音乐与视频。


%== Creating Content Provider==
== 创建Content Provider ==

% To create a content provider:

创建一个Content Provider的步骤如下:

% - Create a new Java class that subclasses the system’s ContentProvider class.
% - Declare your CONTENT_URI.
% - Implement all the unimplemented methods, such as insert(), update(), delete(), query(), getID(), and getType().
% - Declare your Content Provider in the AndroidManifest.xml file.

- 以系统的ContentProvider为基类，派生一个新的类。
- 声明你的CONTENT_URI。
- 实现所有相关的方法，包括insert()，update()，delete()，query()，getID()和getType()。
- 将你的ContentProvider注册到AndroidManifest.xml文件。

% We are going to start by creating a brand new Java class in the same package as any other classes. Its name will be StatusProvider. This class, like any of Android’s main building blocks, will subclass an Android framework class, in this case ContentProvider.

新建一个Java类StatusProvider，放到同一个package之下。它与其它构件一样，也必须派生自Android框架的基类，也就是ContentProvider。

% So in Eclipse, select your package, click on File→New→Java Class, and enter StatusProvider. Then update the class to subclass ContentProvider and organize imports (Ctrl-Shift-O) to import the appropriate Java packages. The result should look like this:

进入Eclipse，选择package，然后``File→New→Java Class``，输入``StatusProvider``。然后修改这个类使之继承ContentProvider，同时调整import语句(Ctrl-Shift-O)，导入必要的Java package。结果如下：

{CODE}
package com.marakana.yamba7;

import android.content.ContentProvider;

public class StatusProvider extends ContentProvider {

}
{/CODE}

% Of course this code is now broken because we need to provide implementation for many of its methods. The easiest way to do that is to click on the class name and choose "Add unimplemented methods" from the list of quick fixes. Eclipse will then create stubs, or templates, of the missing methods.

当然，这段代码仍不完整，我们还需要提供几个方法的实现。这里有个快捷功能，那就是单击这个类名，在quick fix列表中选择"Add unimplemented methods"，Eclipse即可自动生成所缺方法的模板。


%=== Defining the URI ===
=== 定义URI ===

% Objects within a single app can refer to each other simply by variable names, because they share an address space. But objects in different apps don’t recognize the different address spaces, so they need some other mechanism just to find each other. Android uses a A Uniform Resource Identifier, a string that identifies a specific resource, to locate a Content Provider. A URI has three or four parts, shown in Parts of a URI.

程序内部的不同对象可以通过变量名相互引用，因为它们共享着同一个地址空间。但是不同程序的地址空间是相互隔离的，要引用对方的对象，就需要某种额外的机制。Android对此的解决方案就是全局资源标识符(URI)，使用一个字符串来表示资源的位置。每个URI由三个或四个字段组成，如下：

**URI的字段**
{CODE}
content://com.marakana.yamba.statusprovider/status/47
   A              B                           C    D
{/CODE}

% 
% - Part A, content://, is always set to this value. This is written in stone.
% - Part B, com.marakana.yamba.provider, is the so-called authority. It is typically the name of the class, all in lower case. This authority must match the authority that we specify for this provider when we declare it in the manifest file later on.
% - Part C, status, indicates the type of data that this particular provider is providing. It could contain any number of segments separated with a slash, including none at all.
% - Part D, 47, is an optional ID of the specific item that we are referring to. If not set, the URI will represent the entire set. Number 47 is an arbitrary number picked for example.

- 字段A，总是content://，固定不变。
- 字段B，``con.marakana.yamba.provider``，称作"典据"(authority)。通常是类名，全部小写。这个典据必须与我们在Manifest文件中的声明相匹配。
- 字段C，status，表示对应数据的类型。它可以由任意``/``分隔的单词组成。
- 字段D，47，表示对应条目的ID，此项可选。如果忽略，则表示数据的整个集合。


% Sometimes you need to refer to the Content Provider in its entirety, and sometimes to one of the items of data it contains. If you refer to it in its entirety, you leave off Part D; otherwise you include that part to identify one item within the Content Provider. Actually, since we have only one table, we do not need the C part of the URI.

有时需要引用整个ContentProvider，那就忽略字段D；有时只需要其中一项，那就保留字段D，指明对应的条目。另外我们这里只有一个表，因此字段C是可以省略的。

% One way to define the constants for this particular case is like this:

如下是定义常量：

{CODE}
public static final Uri CONTENT_URI = Uri
    .parse("content://com.marakana.yamba7.statusprovider");
public static final String SINGLE_RECORD_MIME_TYPE =
    "vnd.android.cursor.item/vnd.marakana.yamba.status";
public static final String MULTIPLE_RECORDS_MIME_TYPE =
    "vnd.android.cursor.dir/vnd.marakana.yamba.mstatus";
{/CODE}

% In the section called “Getting the Data Type” we’ll explore the reason for two MIME types. We are also going to define the status data object in a class-global variable so that we can refer to it:

关于这两个MIME类型，我们将在后面“获取数据类型”一节中详细讨论。还要在类里定义一个statusData对象，方便以后引用它。

%NOTE: "获取数据类型"为本章的一个小节。

{CODE}
StatusData statusData;
{/CODE}

% The reason we’ll be using the status data object all over our app is that all our database connectivity is centralized in that class. So now the StatusProvider class has a reference to an object of class StatusData.

加入这个statusData对象，是因为数据库的访问都统一到了StatusProvider这个类中。

%NOTE: StatusData是访问数据库的一个类。


%=== Inserting Data ===
=== 插入数据 ===

% To insert a record into a database via the Content Provider interface, we need to override the insert() method. The caller provides the URI of this Content Provider (without an ID) and the values to be inserted. A successful call to insert the new record returns the ID for that record. We end by returning a new URI concatenating the provider’s URI with the ID we just got back.

要通过ContentProvider插入记录，我们需要重载``insert()``方法。调用者需要提供ContentProvider的URI(省略ID)和待插入的值，插入成功可以得到新记录的ID。为此，我们将新记录对应的URI作为返回值。

{CODE}
@Override
public Uri insert(Uri uri, ContentValues values) {
  SQLiteDatabase db = statusData.dbHelper.getWritableDatabase();  //#1
  try {
    long id = db.insertOrThrow(StatusData.TABLE, null, values);  //#2
    if (id == -1) {
      throw new RuntimeException(String.format(
          "%s: Failed to insert [%s] to [%s] for unknown reasons.", TAG,
          values, uri));  //#3
    } else {
      return ContentUris.withAppendedId(uri, id); //#4
    }
  } finally {
    db.close(); //#5
  }
}
{/CODE}

% 
% - We need to open the database for writing.
% - We attempt to insert the values into the database and, upon a successful insert, get back the ID of the new record from the database.
% - If anything fails during the insert, the database will return -1. We can than throw a runtime exception because this is an error that should never have happened.
% - If the insert was successful, we use the ContentUris.withAppendedId() helper method to craft a new URI containing the ID of the new record appended to the standard provider’s URI.
% - We need to close the database no matter what, so a finally block is a good place to do that.

+ 打开数据库，写入模式。
+ 尝试将数据插入，成功的话将返回新记录的ID。
+ 插入过程中若出现失败，则返回-1。我们可以抛出一个运行时异常，因为这是个不该发生的情况。
+ 永远不要忘记关闭数据库。finally子句是个合适地方。


%=== Updating Data ===
=== 更新数据 ===

% To update the data via the Content Provider API, we need:

通过ContentProvider的接口更新数据，我们需要：

% 
% ** The URI of the provider **
% This may or may not contain an ID. If it does, the ID indicates the specific record that needs to be updated, and we can ignore the selection. If the ID is not specified, it means that we are updating many records and we need the selection to indicate which are to be changed.

** ContentProvider的URI **
其中的ID可选。如果提供，则更新ID对应的记录。如果省略，则表示更新多条记录，并需要提供一个选择条件。

% ** The values to be updated **
% The format of this parameter is a set of name/value pairs that represent column names and new values.

** 更新的值 **
这个参数的格式是一组键值对，表示待更新的列名与对应的值。

% ** Any selection and arguments that go with it **
% These together make up a WHERE clause in SQL, selecting the records that will change. The selection and its arguments are omitted when there is an ID, because that is enough to select the record that is being updated.

**选择条件**
这些条件组成了SQL语句的WHERE部分，选择出待更新的记录。如果URI中提供了ID，这些条件就会被省略。

% The code that handles both types of update—by ID and by selection—can be as follows.

考虑到URI中是否提供ID的两种情况，代码如下：

{CODE}
@Override
public int update(Uri uri, ContentValues values, String selection,
    String[] selectionArgs) {
  long id = this.getId(uri); //{#1}
  SQLiteDatabase db = statusData.dbHelper.getWritableDatabase(); //{#2}
  try {
    if (id < 0) {
      return db.update(StatusData.TABLE, values, selection, selectionArgs); //{#3}
    } else {
      return db.update(StatusData.TABLE, values, StatusData.C_ID + "=" + id, null); //{#4}
    }
  } finally {
    db.close(); // {#5}
  }
}
{/CODE}

% 
% - We use the local helper method getId() to extract the ID from the URI that we get. If no ID is present, this method returns -1. getId() will be defined later in this chapter.
% - We need to open the database for writing the updates.
% - If there’s no ID, that means we’re simply updating all the database records that match the selection and selectionArgs constraints.
% - If ID is present, we are using that ID as the only part of the WHERE clause to limit the single record that we’re updating.
% - Don’t forget to close the database no matter what.

+ 使用辅助方法``getId()``获取URI中的ID。如果URI中不存在ID，此方法返回``-1``。``getId()``的定义在本章后面给出。
+ 打开数据库，写入模式。
+ 如果不存在ID，则按照选择条件筛选待更新的所有条目。
+ 如果存在ID，则使用ID作为WHERE部分的唯一参数，限制只更新一条记录。
+ 永远不要忘记关闭数据库。


%=== Deleting Data ===
=== 删除数据 ===

% Deleting the data is similar to updating the data. The URI may or may not contain the ID of the particular record to delete.

删除数据和更新数据类似。URI可以包含也可以不包含特定待删除记录的ID。

删除数据与更新数据很相似。URI中的ID也是可选的。

{CODE}
@Override
public int delete(Uri uri, String selection, String[] selectionArgs) {
  long id = this.getId(uri); //{#1}
  SQLiteDatabase db = statusData.dbHelper.getWritableDatabase(); //{#2}
  try {
    if (id < 0) {
      return db.delete(StatusData.TABLE, selection, selectionArgs); // {#3}
    } else {
      return db.delete(StatusData.TABLE, StatusData.C_ID + "=" + id, null); // {#4}
    }

  } finally {
    db.close(); // {#5}
  }
}
{/CODE}

% - The getId() helper method extracts the ID from the URI that we get. If no ID is present, this method returns -1.
% - We need to open the database for writing the updates.
% - If there’s no ID, we simply delete all the database records that match the selection and selectionArgs constraints.
% - If ID is present, we use that ID as the only part of the WHERE clause to limit the operation to the single record the user wants to delete.
% - Don’t forget to close the database.

+ 使用辅助方法``getId()``获取URI中的ID。如果不存在ID，则返回-1。
+ 打开数据库，写入模式。
+ 如果不存在ID，则按照选择条件筛选待删除的所有条目。
+ 如果存在ID，则使用ID作为WHERE部分的唯一参数，限制只删除一条记录。
+ 永远不要忘记关闭数据库。


%=== Querying Data ===
=== 查询数据 ===

% To query the data via a Content Provider, we override the query() method. This method has a long list of paramaters, but usually we just forward most of them to the database call with the same name.

通过ContentProvider查询数据，我们需要重载``query()``方法。这个方法的参数有很多，不过大多只是原样交给数据库即可，我们不需要多做修改。

{CODE}
@Override
public Cursor query(Uri uri, String[] projection, String selection,
    String[] selectionArgs, String sortOrder) {
  long id = this.getId(uri); // {#1}
  SQLiteDatabase db = statusData.dbHelper.getReadableDatabase(); // {#2}
  if (id < 0) {
    return db.query(StatusData.TABLE, projection, selection, selectionArgs, null,
        null, sortOrder); // {#3}
  } else {
    return db.query(StatusData.TABLE, projection, StatusData.C_ID + "=" + id, null, null, null,
        null); // {#4}
  }
}
{/CODE}

% - The getId() helper method extracts the ID from the URI that we get.
% - We need to open the database, in this case just for reading.
% - If there’s no ID, we simply forward what we got for the Content Provider to the equivalent database call. Note that the database call has two additional parameters that correspond to SQL GROUPING and HAVING components. Because Content Providers do not support this feature, we simply pass in null.
% - If an ID is present, we use that ID as the WHERE clause to limit what record to return.

+ 通过辅助方法``getId()``获取URI中的ID。
+ 打开数据库，只读模式。
+ 如果不存在ID，我们简单将本方法中的参数原样交给数据库。留意，数据库的``insert()``方法有两个额外的参数，分别对应SQL语句的GROUPING和HAVING部分。ContentProvider中没有它们的对应物，因此设为null。
+ 如果存在ID，则使用ID作为WHERE语句的唯一参数，返回对应的记录。


{NOTE}
% 	We do not close the database here because closing the database will destroy the cursor and we still need it on the receiving end to go over the data returned by the query. One way to handle the cursor is to have the receiver manage it. Activities have a simple startManagingCursor() method for this purpose.

关闭数据库的同时会销毁Cursor对象，因此我们在读取数据完毕之前不能关闭数据库，而Cursor对象的生存周期则需要使用者负责管理。针对这一情景，可以利用Activity的``startManagingCursor()``方法。
{/NOTE}

%=== Getting the Data Type ===
=== 获取数据类型 ===

% A ContentProvider must return the MIME type of the data it is returning. The MIME type is either single item, or all the records for the given URI. Earlier in this chapter we defined the single-record MIME type is as vnd.android.cursor.item/vnd.marakana.yamba.status and the directory of all statuses as vnd.android.cursor.dir/vnd.marakana.yamba.status. The call we must define, to let others retrieve the MIME type, is called getType().

ContentProvider必须给出数据的MIME类型。MIME类型是针对URI而言，URI可以表示单个条目也可以表示多个条目，它们的MIME类型就是不同的。在本章前面，我们曾定义过单个条目的MIME类型``vnd.android.cursor.item/vnd.marakana.yamba.status``，而多个条目的MIME类型是``vnd.android.cursor.dir/vnd.marakana.yamba.status``。为了让他人获取相应的MIME类型，我们需要在ContentProvider中实现一个``getType()``方法。

% The first part of the MIME type is either vnd.android.cursor.item or vnd.android.cursor.dir, depending on whether the type represents a specific item or all items we are referring to. The second part, vnd.marakana.yamba.status or vnd.marakana.yamba.mstatus for our app, is a combination of constant vnd followed by your company or app name and the actual content type.

MIME类型的第一部分可以是``vnd.android.cursor.item``或者``vnd.android.cursor.dir``，前者表示单个条目，后者表示多个条目。MIME类型的第二部分与应用程序相关，在这里可以是``vnd.marakana.yamba.status``或者``vnd.marakana.yamba.mstatus``，由公司名或者应用程序名，以及内容类型组成。

% As you may recall, the URI could end with a number. If it does, that number is the ID of the specific record. If it doesn’t, the URI refers to the entire collection.

前面提过URI的结尾可能会是数字。如果是，那这个数字就是某个记录的ID。如果不是，则表示URI指向多条记录。

% The following source shows the implementation of getType() as well as the getId() helper method that we’ve already used several times.

下面的代码展示了``getType()``的实现，以及前面用过多次的辅助方法``getId()``：

{CODE}
@Override
public String getType(Uri uri) {
  return this.getId(uri) < 0 ? MULTIPLE_RECORDS_MIME_TYPE
      : SINGLE_RECORD_MIME_TYPE;  // {#1}
}

private long getId(Uri uri) {
  String lastPathSegment = uri.getLastPathSegment();  // {#2}
  if (lastPathSegment != null) {
    try {
      return Long.parseLong(lastPathSegment); // {#3}
    } catch (NumberFormatException e) { // {#4}
      // at least we tried
    }
  }
  return -1;   // {#5}
}
{/CODE}

% - getType() uses the helper method getId() to determine whether the URI has an ID part. If it does not—as indicated by a negative return value—we return vnd.android.cursor.dir/vnd.marakana.yamba.mstatus for the MIME type. Otherwise, we’re referring to a single record and the MIME type is vnd.android.cursor.item/vnd.marakana.yamba.status. Of course, we previously defined these values as class constants.
% - To extract the ID in our implementation of getId(), we take the last part of the URI.
% - If that last part is not null, we try to parse it as long and return it.
% - It could be that the last part is not a number at all, in which case the parse will fail.
% -  We return -1 to indicate that the given URI doesn’t contain a valid ID.

+ ``getType()``使用辅助方法``getId()``判断URI中是否包含ID字段。如果得到负值，表示URI中不存在ID，因此返回``vnd.android.cursor.dir/vnd.marakana.yamba.mstatus``作为MIME类型。否则返回``vnd.android.cursor.item/vnd.marakana.yamba.status``。我们先前已经定义了这些常量。
+ 为得到ID，获取URI的最后一个字段。
+ 如果最后一个字段非空，则尝试转换为长整型并返回它。
+ 最后一个字段可能不是数字，因此类型转换可能会失败。
+ 返回-1表示URI中不含有合法的ID。


%=== Updating the Android Manifest File ===
=== 更新Android Manifest文件 ===

% As with any major building block, we want to define our Content Provider in the Android Manifest XML file. Notice that in this case the android:authorities property specifies the URI authority authorized to access this content provider. Typically, this authority would be your Content Provider class—which we use here—or your package.

同其它主要构件一致，我们需要将这个ContentProvider注册到Manifest文件中。注意，这里的``android:authorities``定义了URI的典据(authority)，也就是访问这个ContentProvider的凭据。一般来说，这个典据就是ContentProvider的类名，或者类所在的package名。在此我们选择前者。

{CODE}
<application>
  ...
  <provider android:name=".StatusProvider"
    android:authorities="com.marakana.yamba7.statusprovider" />
  ...
</application>
{/CODE}

% At this point our content provider is complete and we are ready to use it in other building blocks of Yamba. But since our application already centralizes all data access in a StatusData object that is readily accessible via YambaApplication, we don’t really have a good use for this content provider within the same application. Besides, content providers mostly make sense when we want to expose the data to another application.

到这里，我们的ContentProvider就已全部完成，接下来就可以在其它构件里使用它了。不过目前为止，各构件访问数据库的操作仍统一在YambaApplication中的StatusData对象上，似乎这个ContentProvider还派不上什么用场。但要为其它应用程序提供数据的话，就离不开ContentProvider了。


%== Using Content Providers Through Widgets ==
== 在小部件中使用ContentProvider ==

% As mentioned before, Content Providers mostly make sense when you want to expose the data to other applications. It is a good practice to always think of your application as part of a larger Android ecosystem and, as such, a potential provider of useful data to other applications.

如前面所说，ContentProvider的作用是为其它应用程序提供数据。在自给自足之外，将自己融入到Android的生态系统会是更好的态度。其它应用程序若需要我们的数据，就可以通过ContentProvider索取。

% To demonstrate how Content Providers can be useful, we’ll create a Home screen widget. We’re not using the term widget here as in a synonym for Android’s View class, but as a useful embedded service for the Home screen to offer.

接下来我们将新建一个小部件(widget)，用来演示ContentProvider的作用。这里的"小部件"跟View类的俗称"控件"不是一回事，它可以挂在主屏幕上，提供一些快捷功能。

(译者注："小部件"与"控件"的英文原文都是widget，很容易让人混淆)

% Android typically ships with a few Home screen widgets. You can access them by going to your home screen, long-pressing on it to pull up an Add to Home Screen dialog, and choosing Widgets. Widgets that come with Android include Alarm Clock, Picture Frame, Power Controls, Music, and Search. Our goal is to create our own Yamba Widget that the user will be able to add to the Home screen.

Android通常自带着一些小部件，比如时钟、相框、电源控制、音乐播放器与搜索框等等。
它们一般显示在主屏幕上，你也可以通过``Add to Home Screen``对话框将它们添加到主屏幕。本节的目标就是创建一个Yamba小部件，使之可以挂在主屏幕上。

% The Yamba Widget will be simple, displaying just the latest status update. To create it, we’ll create a new YambaWidget Class that subclasses AppWidgetProviderInfo. We’ll also have to register the widget with the manifest file.

Yamba小部件不会太复杂，仅仅展示最近的消息更新即可。为创建它，我们将以``AppWidgetProviderInfo``为基类，新建一个YambaWidget类，最后把它注册到Manifest文件里。

%=== Implementing the YambaWidget class ===
=== 实现YambaWidget类 ===

% YambaWidget is the main class for our widget. It is a subclass of AppWidgetProvider, a special system class that makes widgets. This class itself is a subclass of BroadcastReceiver, so our Yamba Widget is automatically a broadcast receiver. Basically, whenever our widget is updated, deleted, enabled, or disabled, we’ll get a broadcast intent with that information. So this class inherits the onUpdate(), onDeleted(), onEnabled(), onDisabled(), and onReceive() callbacks. We can override any of these, but typically we care mostly about the updates and general broadcasts we receive.

YambaWidget就是这个小部件所对应的类，它以AppWidgetProvider为基类。后者是Android框架为创建小部件所专门提供的一个类，它本身是BroadcastReceiver的子类，因此YambaWidget自然也算是一个BroadcastReceiver。在小部件更新、删除、启动、关闭时，我们都会相应地收到一个BroadcastIndent。因此，这个类继承着``onUpdate()``、``onDeleted()``、``onEnabled()``、``onDisabled()``和``onReceive()``几个回调方法，我们可以重载它们。在这里，只重载``onUpdate()``和``onReceive()``即可。

% Now that we understand the overall design of the widget framework, here’s how we implement it.

现在对小部件的设计已有大致了解，下面是具体实现：

Example 12.1. YambaWidget.java
{CODE}
package com.marakana.yamba7;

import android.app.PendingIntent;
import android.appwidget.AppWidgetManager;
import android.appwidget.AppWidgetProvider;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.text.format.DateUtils;
import android.util.Log;
import android.widget.RemoteViews;

public class YambaWidget extends AppWidgetProvider { // {#1}
  private static final String TAG = YambaWidget.class.getSimpleName();

  @Override
  public void onUpdate(Context context, AppWidgetManager appWidgetManager,
      int[] appWidgetIds) { // {#2}
    Cursor c = context.getContentResolver().query(StatusProvider.CONTENT_URI,
        null, null, null, null); // {#3}
    try {
      if (c.moveToFirst()) { {//#4}
        CharSequence user = c.getString(c.getColumnIndex(StatusData.C_USER)); // {#5}
        CharSequence createdAt = DateUtils.getRelativeTimeSpanString(context, c
            .getLong(c.getColumnIndex(StatusData.C_CREATED_AT)));
        CharSequence message = c.getString(c.getColumnIndex(StatusData.C_TEXT));

        // Loop through all instances of this widget
        for (int appWidgetId : appWidgetIds) { // {#6}
          Log.d(TAG, "Updating widget " + appWidgetId);
          RemoteViews views = new RemoteViews(context.getPackageName(),
              R.layout.yamba_widget); // {#7}
          views.setTextViewText(R.id.textUser, user); // {#8}
          views.setTextViewText(R.id.textCreatedAt, createdAt);
          views.setTextViewText(R.id.textText, message);
          views.setOnClickPendingIntent(R.id.yamba_icon, PendingIntent
              .getActivity(context, 0, new Intent(context,
                  TimelineActivity.class), 0));
          appWidgetManager.updateAppWidget(appWidgetId, views); // {#9}
        }
      } else {
        Log.d(TAG, "No data to update");
      }
    } finally {
      c.close(); // {#10}
    }
    Log.d(TAG, "onUpdated");
  }

  @Override
  public void onReceive(Context context, Intent intent) { // {#10}
    super.onReceive(context, intent);
    if (intent.getAction().equals(UpdaterService.NEW_STATUS_INTENT)) { // {#11}
      Log.d(TAG, "onReceived detected new status update");
      AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context); // {#12}
      this.onUpdate(context, appWidgetManager, appWidgetManager
          .getAppWidgetIds(new ComponentName(context, YambaWidget.class))); // {#13}
    }
  }
}
{/CODE}

% - As mentioned before, our widget is a subclass of AppWidgetProvider, which itself is a BroadcastReceiver.
% - This method is called whenever our widget is to be updated, so it’s where we’ll implement the main functionality of the widget. When we register the widget with the system in the manifest file later, we’ll specify the update frequency we’d like. In our case, this method will be called about every 30 minutes.
% - We finally get to use our Content Provider. The whole purpose of this widget in this chapter is to illustrate how to use the StatusProvider that we created earlier. As you have already seen when we implemented the content provider, its API is quite similar to the SQLite database API. The main difference is that instead of passing a table name to a database object, we’re passing a Content URI to the Content Resolver. We still get back the very same Cursor object as we did with databases in Chapter 9, Database.
% - In this particular example, we care only about the very latest status update from the online service. So we position the cursor to the first element. If one exists, it’s our latest status update.
% - In the next few of lines of code, we extract data from the cursor object and store it in local variables.
% - Since the user could have multiple Yamba Widgets installed, we need to loop through them and update them all. We don’t particularly care what the appWidgetId is because we’re doing identical work to update every instance of Yamba Widget. The appWidgetId becomes an opaque handle we use to access each widget in turn.
% - The actual view representing our widget is in another process. To be precise, our widget is running inside the Home application, which acts as its host and is the process we are updating. Hence the RemoteViews constructor. The Remote Views framework is a special shared memory system designed specifically for widgets.
% - Once we have the reference to the Java memory space of our widget views in another process, we can update those views. In this case, we’re setting the status data in the row that represents our widget.
% - Once we update the remote views, the AppWidgetManager call to updateAppWidget() actually posts a message to have the system update our widget. This will happen asynchronously, but shortly after onUpdate() completes.
% - Whether or not the StatusProvider found a new status, we release the data that we might have gotten from the Content Provider. This is just a good practice.
% - The call to onReceive() is not necessary in a typical widget. But since a widget is a Broadcast Receiver, and since our Updater Service does send a broadcast when we get a new status update, this method is a good opportunity to invoke onUpdate() and get the latest status data updated on the widget.
% - We check whether the intent was the one for the new status broadcast.
% - If it was, we get the instance of AppWidgetManager for this context.
% - We then invoke onUpdate().

+ 如前所说，我们的小部件是``AppWidgetProvider``的子类，而``AppWidgetProvider``又是``BroadcastReceiver``的子类。
+ 此方法在小部件状态更新时触发，因此将主要功能的实现放在这里。在稍后将它注册到Manifest文件时，我们将为它的状态更新设置一个时间间隔，也就是30分钟。
+ 终于可以用上我们的ContentProvider了。在前面我们编写StatusProvider时可以体会到，它的API与SQLite数据库的API十分相似，甚至返回值也是一个Cursor。不过主要区别在于，在这里不是给出表名，而是给出URI。
+ 在这里，我们只关心服务端最新的消息更新。因此Cursor指向第一个的元素若存在，那它就是最新的消息。
+ 如下的几行代码读出Cursor对象中的数据，并储存到局部变量中。
+ 用户可以挂载多个Yamba小部件，因此需要遍历并更新所有小部件。``appWidgetId``是某个小部件的标识符，在这里我们是更新所有小部件，因此不必关心某个``appWidgetId``具体的值。
+ 我们小部件所在的View位于另一个进程中，因此使用``RemoteViews``。RemoteViews是专门为小部件设计的某种共享内存机制。
+ 得到了另一个进程地址空间中View的引用，即可更新它们。
+ 更新过RemoteViews对象，然后调用AppWidgetManager的``updateAppWidget()``方法，将发送一条消息，通知系统更新所有的小部件。这是个异步操作，不过实际执行会在``onUpdate()``之后。
+ 不管得到新消息与否，都要记得释放从ContentProvider中得到的对象。这是个好习惯。
+ 对一般的小部件来说，``onReceive()``并无必要。不过小部件既然是BroadcastReceiver，而UpdaterService在每获得一条消息时都会发一条广播。我们可以利用这个性质，在``onReceive()``中触发``onUpdate()``，实现消息的更新。
+ 如果得到新消息，获取当前上下文的``AppWidgetManager``对象。
+ 触发``onUpdate()``。


% At this point, we have coded the Yamba Widget, and as a receiver, it will get notified periodically or when there are new updates, and it will loop through all instances of this widget on the Home screen and update them.

到这里，我们已经编写YambaWidget完毕。作为一个BroadcastReceiver，它会在定期或在新状态更新时得到通知，然后遍历主屏幕上所有的Yamba小部件并更新它们。

% Next, we need to set up the layout for our widget.

接下来设计小部件的外观布局。


%=== Creating the XML Layout ===
=== 创建XML布局 ===

% The layout for the widget is fairly straightforward. Note that we’re reusing our existing row.xml file that displays status data properly in the Timeline Activity. Here, we just include it along with a little title and an icon to make it look good on the home screen.

小部件的外观布局很简单。留意我们在这里重用了TimelineActivity中用到的``row.xml``文件，用以表示消息的显示。另外再给它加一个小标题，在主屏幕上更醒目些。

Example 12.2. res/layout/yamba_widget.xml
{CODE}
<?xml version="1.0" encoding="utf-8"?>
  <!-- #1 -->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
  android:layout_height="wrap_content" android:layout_width="fill_parent"
  android:background="@color/edit_text_background"
  android:layout_margin="5dp" android:padding="5dp">
  <!-- #2 -->
  <ImageView android:layout_width="wrap_content" android:src="@drawable/icon"
    android:layout_height="fill_parent" android:id="@+id/yamba_icon"
    android:clickable="true" />
  <!-- #3 -->
  <include layout="@layout/row" />
</LinearLayout>
{/CODE}

% 
% - We’re using Linear Layout to hold our widget together. It runs horizontally with the icon on the left and the status data on the right.
% - This is the icon, our standard Yamba icon.
% - Notice the use of <include> element. This is how we include our existing row.xml into this layout so we don’t have to duplicate the code.

+ 应用LinearLayout使之水平排列，图标显示在左边，消息显示在右边。
+ 小部件的图标，与Yamba的图标一致。
+ 留意我们使用了``<include>``标签。这样可以引入现有的``row.xml``文件的内容，而不必复制粘贴代码。

% This layout is simple enough, but does the job for our particular needs. Next, we need to define some basic information about this widget and its behavior.

这个布局很简单，不过麻雀虽小，五脏俱全。接下来定义小部件的基本信息。


%=== Creating the AppWidgetProviderInfo File ===
=== 创建AppWidgetProviderInfo文件 ===

% This XML file is responsible for describing the widget. It typically specifies what layout this widget uses, how frequently it should be updated by the system, and what its size is.

这个文件用于描述小部件的基本信息。它一般用于定义小部件的布局、更新频率以及尺寸等信息。

Example 12.3. res/xml/yamba_widget_info.xml
{CODE}
<?xml version="1.0" encoding="utf-8"?>
<appwidget-provider xmlns:android="http://schemas.android.com/apk/res/android"
  android:initialLayout="@layout/yamba_widget" android:minWidth="294dp"
  android:minHeight="72dp" android:label="@string/msgLastTimelineUpdate"
  android:updatePeriodMillis="1800000" />
{/CODE}

% In this case we are specifying that we’d like to have to have our widget updated every 30 minutes or so (1800000 milliseconds). Here, we also specify the layout to use, the title of this widget, and its size.

在这个例子里指定了我们想要更新Widget的频率是每30分钟或者是这样（1800000毫秒）。这里我们还指定了所用的布局，Widget的标题和大小。

在这里，我们将小部件的更新频率设为30分钟(1800000毫秒)。另外也定义了它的布局，以及标题和尺寸。


%=== Updating the Manifest File ===
=== 更新Manifest文件 ===

% Finally, we need to update the manifest file and register the widget.

最后更新Manifest文件，将这个小部件注册。

{CODE}
  ...
  <application .../>
    ...
    <receiver android:name=".YambaWidget" android:label="@string/msgLastTimelineUpdate">
      <intent-filter>
        <action android:name="android.appwidget.action.APPWIDGET_UPDATE" />
      </intent-filter>
      <intent-filter>
        <action android:name="com.marakana.yamba.NEW_STATUS" />
      </intent-filter>
      <meta-data android:name="android.appwidget.provider"
        android:resource="@xml/yamba_widget_info" />
    </receiver>
    ...
  </application>
  ...
{/CODE}

% Notice that the widget is a receiver, as we mentioned before. So, just like other broadcast receivers, we declare it within a <receiver> tag inside an <application> element. It is important to register this receiver to receive ACTION_APPWIDGET_UPDATE updates. We do that via the <intent-filter>. The <meta-data> specifies the meta information for this widget in the yamba_widget_info XML file described in the previous section.

前面提到，小部件也是个BroadcastReceiver，因此也需要一个<receiver>的声明放在<application>标签里，通过<intent-filter>筛选出感兴趣的Intent，比如ACTION_APPWIDGET_UPDATE。<meta-data>标签表示小部件的元信息定义在yamba_widget_info这个XML文件里。

% That's it. We now have the widget and are ready to test it.

好了。我们已经实现了一个完整的小部件，可以测试一下。

% === Test That It Works ===
===测试===

% To test this widget, install your latest application on the device. Next, go to the Home screen, long-press it, and click on the Widgets choice. You should be able to navigate to the Yamba Widget at this point. After adding it to the Home screen, the widget should display the latest status update.

把它安装到设备上。进入主屏幕，长按然后点击选择小部件。在这里就可以看到Yamba小部件了。添加到主屏幕上之后，它应当显示最新的消息更新。

% If your Updater Service is running, you should be able to see the latest updates show up on the Home screen. This means your widget is running properly.

只要你的UpdaterService还在运行，就应该看到消息会随时更新。这就证明小部件运行正常了。


%== Summary ==
== 总结 ==

% At this point, the Yamba app is complete—congratulations! You are ready to fine-tune it, customize it, and publish it to the market.

恭喜，Yamba已经大工告成！你可以稍作调优，加入一些个性元素，然后就可以发布到市场去了。

% Figure 12.1, “Yamba Completion” illustrates what we have done so far as part of the design outlined in Figure 5.4, “Yamba Design Diagram”.

图12.1展示了我们目前为止的完成部分。届此，图5.4中的设计我们已全部实现。

		Figure 12.1. Yamba Completion
	[images/12-Yamba-7.png]

